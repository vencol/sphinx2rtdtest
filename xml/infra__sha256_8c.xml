<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="infra__sha256_8c" kind="file" language="C++">
    <compoundname>infra_sha256.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="infra__sha256_8h" local="yes">infra_sha256.h</includes>
    <incdepgraph>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>main/atprocess/infra_sha256.c</label>
        <link refid="infra__sha256_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>infra_sha256.h</label>
        <link refid="infra__sha256_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="infra__sha256_8c_1ab24a212c8f2b0f3af61d0cd1bd177101" prot="public" static="no">
        <name>INFRA_SHA256_SMALLER</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="5" column="9" bodyfile="main/atprocess/infra_sha256.c" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infra__sha256_8c_1a266e1e762254b5573f101dd825a72759" prot="public" static="no">
        <name>SHA256_KEY_IOPAD_SIZE</name>
        <initializer>(64)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="11" column="9" bodyfile="main/atprocess/infra_sha256.c" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infra__sha256_8c_1a81efbc0fc101b06a914f7ff9e2fbc0e9" prot="public" static="no">
        <name>SHA256_DIGEST_SIZE</name>
        <initializer>(32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="12" column="9" bodyfile="main/atprocess/infra_sha256.c" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infra__sha256_8c_1a37e0e1a97807195e2de54fd6487751d3" prot="public" static="no">
        <name>GET_UINT32_BE</name>
        <param><defname>n</defname></param>
        <param><defname>b</defname></param>
        <param><defname>i</defname></param>
        <initializer>    do {                                                    \
        (n) = ( (uint32_t) (b)[(i)    ] &lt;&lt; 24 )             \
              | ( (uint32_t) (b)[(i) + 1] &lt;&lt; 16 )             \
              | ( (uint32_t) (b)[(i) + 2] &lt;&lt;  8 )             \
              | ( (uint32_t) (b)[(i) + 3]       );            \
    } while( 0 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="18" column="9" bodyfile="main/atprocess/infra_sha256.c" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infra__sha256_8c_1a4671795996d0aae650c87a82bca7b880" prot="public" static="no">
        <name>PUT_UINT32_BE</name>
        <param><defname>n</defname></param>
        <param><defname>b</defname></param>
        <param><defname>i</defname></param>
        <initializer>    do {                                                    \
        (b)[(i)    ] = (unsigned char) ( (n) &gt;&gt; 24 );       \
        (b)[(i) + 1] = (unsigned char) ( (n) &gt;&gt; 16 );       \
        (b)[(i) + 2] = (unsigned char) ( (n) &gt;&gt;  8 );       \
        (b)[(i) + 3] = (unsigned char) ( (n)       );       \
    } while( 0 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="28" column="9" bodyfile="main/atprocess/infra_sha256.c" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infra__sha256_8c_1a34f8c30efd49bafaaef210c443a467dc" prot="public" static="no">
        <name>SHR</name>
        <param><defname>x</defname></param>
        <param><defname>n</defname></param>
        <initializer>((x &amp; 0xFFFFFFFF) &gt;&gt; n)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="100" column="10" bodyfile="main/atprocess/infra_sha256.c" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infra__sha256_8c_1a47a06d6e229d50d2b1a326ec58123cae" prot="public" static="no">
        <name>ROTR</name>
        <param><defname>x</defname></param>
        <param><defname>n</defname></param>
        <initializer>(SHR(x,n) | (x &lt;&lt; (32 - n)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="101" column="9" bodyfile="main/atprocess/infra_sha256.c" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infra__sha256_8c_1a4fe3c738087e923a3174ad2a116e3be5" prot="public" static="no">
        <name>S0</name>
        <param><defname>x</defname></param>
        <initializer>(ROTR(x, 7) ^ ROTR(x,18) ^  SHR(x, 3))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="103" column="9" bodyfile="main/atprocess/infra_sha256.c" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infra__sha256_8c_1a59c41bcd16cbf3247d426429c3bf8e08" prot="public" static="no">
        <name>S1</name>
        <param><defname>x</defname></param>
        <initializer>(ROTR(x,17) ^ ROTR(x,19) ^  SHR(x,10))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="104" column="9" bodyfile="main/atprocess/infra_sha256.c" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infra__sha256_8c_1a53a4af5a86745d27a1c31559b65eaa5c" prot="public" static="no">
        <name>S2</name>
        <param><defname>x</defname></param>
        <initializer>(ROTR(x, 2) ^ ROTR(x,13) ^ ROTR(x,22))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="106" column="9" bodyfile="main/atprocess/infra_sha256.c" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infra__sha256_8c_1ad4cd7aab396ec307ef11545e4c0d322c" prot="public" static="no">
        <name>S3</name>
        <param><defname>x</defname></param>
        <initializer>(ROTR(x, 6) ^ ROTR(x,11) ^ ROTR(x,25))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="107" column="9" bodyfile="main/atprocess/infra_sha256.c" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infra__sha256_8c_1aaefb24d5edbae9ebbaae9896fa48f46b" prot="public" static="no">
        <name>F0</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <param><defname>z</defname></param>
        <initializer>((x &amp; y) | (z &amp; (x | y)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="109" column="9" bodyfile="main/atprocess/infra_sha256.c" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infra__sha256_8c_1a3c2b6b2959faadfcf644757cb570b734" prot="public" static="no">
        <name>F1</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <param><defname>z</defname></param>
        <initializer>(z ^ (x &amp; (y ^ z)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="110" column="9" bodyfile="main/atprocess/infra_sha256.c" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infra__sha256_8c_1a2aa52cc83b38d01e9ba187b092057d7e" prot="public" static="no">
        <name>R</name>
        <param><defname>t</defname></param>
        <initializer>    (                                               \
            W[t] = S1(W[t -  2]) + W[t -  7] +          \
                   S0(W[t - 15]) + W[t - 16]            \
    )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="112" column="9" bodyfile="main/atprocess/infra_sha256.c" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infra__sha256_8c_1a8e8a14b8da1459bd6fd0b55b3171ab06" prot="public" static="no">
        <name>P</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>c</defname></param>
        <param><defname>d</defname></param>
        <param><defname>e</defname></param>
        <param><defname>f</defname></param>
        <param><defname>g</defname></param>
        <param><defname>h</defname></param>
        <param><defname>x</defname></param>
        <param><defname>K</defname></param>
        <initializer>    {                                               \
        temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
        temp2 = S2(a) + F0(a,b,c);                  \
        d += temp1; h = temp1 + temp2;              \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="118" column="9" bodyfile="main/atprocess/infra_sha256.c" bodystart="118" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="infra__sha256_8c_1ab68ffa0ba597cba57a3f71ec806d5281" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t K[]</definition>
        <argsstring>[]</argsstring>
        <name>K</name>
        <initializer>= {
    0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
    0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
    0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
    0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
    0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
    0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
    0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
    0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
    0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
    0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
    0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
    0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
    0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
    0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
    0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
    0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="81" column="23" bodyfile="main/atprocess/infra_sha256.c" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="infra__sha256_8c_1a794d6401f0c63300aa9ad48c619d2600" prot="public" static="yes" mutable="no">
        <type>const unsigned char</type>
        <definition>const unsigned char sha256_padding[64]</definition>
        <argsstring>[64]</argsstring>
        <name>sha256_padding</name>
        <initializer>= {
    0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="225" column="28" bodyfile="main/atprocess/infra_sha256.c" bodystart="225" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="infra__sha256_8c_1a347950d656c153f30f5f14a15944ac08" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void utilsSha256Zeroize</definition>
        <argsstring>(void *v, uint32_t n)</argsstring>
        <name>utilsSha256Zeroize</name>
        <param>
          <type>void *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="38" column="13" bodyfile="main/atprocess/infra_sha256.c" bodystart="38" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="infra__sha256_8c_1af4f56028a99848b0ea2aaa26a3ee7831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void utilsSha256Init</definition>
        <argsstring>(iot_sha256_context *ctx)</argsstring>
        <name>utilsSha256Init</name>
        <param>
          <type><ref refid="structiot__sha256__context" kindref="compound">iot_sha256_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Initialize SHA-256 context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>SHA-256 context to be initialized </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="46" column="6" bodyfile="main/atprocess/infra_sha256.c" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="infra__sha256_8c_1aaaa994f3f0224c49de489d3243e43db0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void utilsSha256Free</definition>
        <argsstring>(iot_sha256_context *ctx)</argsstring>
        <name>utilsSha256Free</name>
        <param>
          <type><ref refid="structiot__sha256__context" kindref="compound">iot_sha256_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Clear SHA-256 context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>SHA-256 context to be cleared </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="51" column="6" bodyfile="main/atprocess/infra_sha256.c" bodystart="51" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="infra__sha256_8c_1ae75db8af0b08497a74e72d9b72bac256" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void utilsSha256Starts</definition>
        <argsstring>(iot_sha256_context *ctx)</argsstring>
        <name>utilsSha256Starts</name>
        <param>
          <type><ref refid="structiot__sha256__context" kindref="compound">iot_sha256_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>SHA-256 context setup. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to be initialized </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="60" column="6" bodyfile="main/atprocess/infra_sha256.c" bodystart="60" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="infra__sha256_8c_1abae1a89bef078de0dc0e6ec6ac64978f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void utilsSha256Process</definition>
        <argsstring>(iot_sha256_context *ctx, const unsigned char data[64])</argsstring>
        <name>utilsSha256Process</name>
        <param>
          <type><ref refid="structiot__sha256__context" kindref="compound">iot_sha256_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char</type>
          <declname>data</declname>
          <array>[64]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="125" column="6" bodyfile="main/atprocess/infra_sha256.c" bodystart="125" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="infra__sha256_8c_1a0ba2ff59a47cae47912500d9ae6936f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void utilsSha256Update</definition>
        <argsstring>(iot_sha256_context *ctx, const unsigned char *input, uint32_t ilen)</argsstring>
        <name>utilsSha256Update</name>
        <param>
          <type><ref refid="structiot__sha256__context" kindref="compound">iot_sha256_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ilen</declname>
        </param>
        <briefdescription>
<para>SHA-256 process buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>SHA-256 context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer holding the data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the input data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="187" column="6" bodyfile="main/atprocess/infra_sha256.c" bodystart="187" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="infra__sha256_8c_1abd2c392a5c7a326cedece784c02c9ba8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void utilsSha256Finish</definition>
        <argsstring>(iot_sha256_context *ctx, uint8_t output[32])</argsstring>
        <name>utilsSha256Finish</name>
        <param>
          <type><ref refid="structiot__sha256__context" kindref="compound">iot_sha256_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>output</declname>
          <array>[32]</array>
        </param>
        <briefdescription>
<para>SHA-256 final digest. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>SHA-256 context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>SHA-256 checksum result </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="232" column="6" bodyfile="main/atprocess/infra_sha256.c" bodystart="232" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="infra__sha256_8c_1a60965544b3c27afd6adee640a2ff8cc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void utilsSha256</definition>
        <argsstring>(const uint8_t *input, uint32_t ilen, uint8_t output[32])</argsstring>
        <name>utilsSha256</name>
        <param>
          <type>const uint8_t *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ilen</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>output</declname>
          <array>[32]</array>
        </param>
        <briefdescription>
<para>Output = SHA-256( input buffer ) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer holding the data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the input data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>SHA-256 checksum result </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="264" column="6" bodyfile="main/atprocess/infra_sha256.c" bodystart="264" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="infra__sha256_8c_1ab9b2e04c6d16d5f0c617ebe7dffbfb75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void utilsHmacSha256</definition>
        <argsstring>(const uint8_t *msg, uint32_t msg_len, const uint8_t *key, uint32_t key_len, uint8_t output[32])</argsstring>
        <name>utilsHmacSha256</name>
        <param>
          <type>const uint8_t *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>msg_len</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>key_len</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>output</declname>
          <array>[32]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/infra_sha256.c" line="275" column="6" bodyfile="main/atprocess/infra_sha256.c" bodystart="275" bodyend="315"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2015-2018<sp/>Alibaba<sp/>Group<sp/>Holding<sp/>Limited</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INFRA_SHA256_SMALLER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;infra_sha256.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHA256_KEY_IOPAD_SIZE<sp/><sp/><sp/>(64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHA256_DIGEST_SIZE<sp/><sp/><sp/><sp/><sp/><sp/>(32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>32-bit<sp/>integer<sp/>manipulation<sp/>macros<sp/>(big<sp/>endian)</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GET_UINT32_BE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GET_UINT32_BE(n,b,i)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(n)<sp/>=<sp/>(<sp/>(uint32_t)<sp/>(b)[(i)<sp/><sp/><sp/><sp/>]<sp/>&lt;&lt;<sp/>24<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(<sp/>(uint32_t)<sp/>(b)[(i)<sp/>+<sp/>1]<sp/>&lt;&lt;<sp/>16<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(<sp/>(uint32_t)<sp/>(b)[(i)<sp/>+<sp/>2]<sp/>&lt;&lt;<sp/><sp/>8<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(<sp/>(uint32_t)<sp/>(b)[(i)<sp/>+<sp/>3]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while(<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PUT_UINT32_BE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PUT_UINT32_BE(n,b,i)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b)[(i)<sp/><sp/><sp/><sp/>]<sp/>=<sp/>(unsigned<sp/>char)<sp/>(<sp/>(n)<sp/>&gt;&gt;<sp/>24<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b)[(i)<sp/>+<sp/>1]<sp/>=<sp/>(unsigned<sp/>char)<sp/>(<sp/>(n)<sp/>&gt;&gt;<sp/>16<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b)[(i)<sp/>+<sp/>2]<sp/>=<sp/>(unsigned<sp/>char)<sp/>(<sp/>(n)<sp/>&gt;&gt;<sp/><sp/>8<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b)[(i)<sp/>+<sp/>3]<sp/>=<sp/>(unsigned<sp/>char)<sp/>(<sp/>(n)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while(<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>utilsSha256Zeroize(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*v,<sp/>uint32_t<sp/>n)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n--)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>utilsSha256Init(<ref refid="structiot__sha256__context" kindref="compound">iot_sha256_context</ref><sp/>*ctx)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(ctx,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structiot__sha256__context" kindref="compound">iot_sha256_context</ref>));</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>utilsSha256Free(<ref refid="structiot__sha256__context" kindref="compound">iot_sha256_context</ref><sp/>*ctx)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>==<sp/>ctx)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>utilsSha256Zeroize(ctx,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structiot__sha256__context" kindref="compound">iot_sha256_context</ref>));</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>utilsSha256Starts(<ref refid="structiot__sha256__context" kindref="compound">iot_sha256_context</ref><sp/>*ctx)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is224<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structiot__sha256__context_1a097a654e2edb579290bc5c38dbe2e6d5" kindref="member">total</ref>[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structiot__sha256__context_1a097a654e2edb579290bc5c38dbe2e6d5" kindref="member">total</ref>[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is224<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>SHA-256<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structiot__sha256__context_1a7e7dd244818f8acb0e22c041fd18fceb" kindref="member">state</ref>[0]<sp/>=<sp/>0x6A09E667;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structiot__sha256__context_1a7e7dd244818f8acb0e22c041fd18fceb" kindref="member">state</ref>[1]<sp/>=<sp/>0xBB67AE85;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structiot__sha256__context_1a7e7dd244818f8acb0e22c041fd18fceb" kindref="member">state</ref>[2]<sp/>=<sp/>0x3C6EF372;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structiot__sha256__context_1a7e7dd244818f8acb0e22c041fd18fceb" kindref="member">state</ref>[3]<sp/>=<sp/>0xA54FF53A;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structiot__sha256__context_1a7e7dd244818f8acb0e22c041fd18fceb" kindref="member">state</ref>[4]<sp/>=<sp/>0x510E527F;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structiot__sha256__context_1a7e7dd244818f8acb0e22c041fd18fceb" kindref="member">state</ref>[5]<sp/>=<sp/>0x9B05688C;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structiot__sha256__context_1a7e7dd244818f8acb0e22c041fd18fceb" kindref="member">state</ref>[6]<sp/>=<sp/>0x1F83D9AB;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structiot__sha256__context_1a7e7dd244818f8acb0e22c041fd18fceb" kindref="member">state</ref>[7]<sp/>=<sp/>0x5BE0CD19;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structiot__sha256__context_1aae8823e11620c906fb0ebe436c8766af" kindref="member">is224</ref><sp/>=<sp/>is224;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>K[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>0x428A2F98,<sp/>0x71374491,<sp/>0xB5C0FBCF,<sp/>0xE9B5DBA5,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>0x3956C25B,<sp/>0x59F111F1,<sp/>0x923F82A4,<sp/>0xAB1C5ED5,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>0xD807AA98,<sp/>0x12835B01,<sp/>0x243185BE,<sp/>0x550C7DC3,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>0x72BE5D74,<sp/>0x80DEB1FE,<sp/>0x9BDC06A7,<sp/>0xC19BF174,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>0xE49B69C1,<sp/>0xEFBE4786,<sp/>0x0FC19DC6,<sp/>0x240CA1CC,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>0x2DE92C6F,<sp/>0x4A7484AA,<sp/>0x5CB0A9DC,<sp/>0x76F988DA,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>0x983E5152,<sp/>0xA831C66D,<sp/>0xB00327C8,<sp/>0xBF597FC7,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>0xC6E00BF3,<sp/>0xD5A79147,<sp/>0x06CA6351,<sp/>0x14292967,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>0x27B70A85,<sp/>0x2E1B2138,<sp/>0x4D2C6DFC,<sp/>0x53380D13,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>0x650A7354,<sp/>0x766A0ABB,<sp/>0x81C2C92E,<sp/>0x92722C85,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>0xA2BFE8A1,<sp/>0xA81A664B,<sp/>0xC24B8B70,<sp/>0xC76C51A3,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>0xD192E819,<sp/>0xD6990624,<sp/>0xF40E3585,<sp/>0x106AA070,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>0x19A4C116,<sp/>0x1E376C08,<sp/>0x2748774C,<sp/>0x34B0BCB5,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>0x391C0CB3,<sp/>0x4ED8AA4A,<sp/>0x5B9CCA4F,<sp/>0x682E6FF3,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>0x748F82EE,<sp/>0x78A5636F,<sp/>0x84C87814,<sp/>0x8CC70208,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>0x90BEFFFA,<sp/>0xA4506CEB,<sp/>0xBEF9A3F7,<sp/>0xC67178F2,</highlight></codeline>
<codeline lineno="98"><highlight class="normal">};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>SHR(x,n)<sp/>((x<sp/>&amp;<sp/>0xFFFFFFFF)<sp/>&gt;&gt;<sp/>n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ROTR(x,n)<sp/>(SHR(x,n)<sp/>|<sp/>(x<sp/>&lt;&lt;<sp/>(32<sp/>-<sp/>n)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>S0(x)<sp/>(ROTR(x,<sp/>7)<sp/>^<sp/>ROTR(x,18)<sp/>^<sp/><sp/>SHR(x,<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>S1(x)<sp/>(ROTR(x,17)<sp/>^<sp/>ROTR(x,19)<sp/>^<sp/><sp/>SHR(x,10))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>S2(x)<sp/>(ROTR(x,<sp/>2)<sp/>^<sp/>ROTR(x,13)<sp/>^<sp/>ROTR(x,22))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>S3(x)<sp/>(ROTR(x,<sp/>6)<sp/>^<sp/>ROTR(x,11)<sp/>^<sp/>ROTR(x,25))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>F0(x,y,z)<sp/>((x<sp/>&amp;<sp/>y)<sp/>|<sp/>(z<sp/>&amp;<sp/>(x<sp/>|<sp/>y)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>F1(x,y,z)<sp/>(z<sp/>^<sp/>(x<sp/>&amp;<sp/>(y<sp/>^<sp/>z)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>R(t)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>W[t]<sp/>=<sp/>S1(W[t<sp/>-<sp/><sp/>2])<sp/>+<sp/>W[t<sp/>-<sp/><sp/>7]<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S0(W[t<sp/>-<sp/>15])<sp/>+<sp/>W[t<sp/>-<sp/>16]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>P(a,b,c,d,e,f,g,h,x,K)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp1<sp/>=<sp/>h<sp/>+<sp/>S3(e)<sp/>+<sp/>F1(e,f,g)<sp/>+<sp/>K<sp/>+<sp/>x;<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp2<sp/>=<sp/>S2(a)<sp/>+<sp/>F0(a,b,c);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>+=<sp/>temp1;<sp/>h<sp/>=<sp/>temp1<sp/>+<sp/>temp2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>utilsSha256Process(<ref refid="structiot__sha256__context" kindref="compound">iot_sha256_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>data[64])</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>temp1,<sp/>temp2,<sp/>W[64];</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>A[8];</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[i]<sp/>=<sp/>ctx-&gt;<ref refid="structiot__sha256__context_1a7e7dd244818f8acb0e22c041fd18fceb" kindref="member">state</ref>[i];</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(INFRA_SHA256_SMALLER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>64;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GET_UINT32_BE(W[i],<sp/>data,<sp/>4<sp/>*<sp/>i);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R(i);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P(A[0],<sp/>A[1],<sp/>A[2],<sp/>A[3],<sp/>A[4],<sp/>A[5],<sp/>A[6],<sp/>A[7],<sp/>W[i],<sp/>K[i]);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp1<sp/>=<sp/>A[7];</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[7]<sp/>=<sp/>A[6];</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[6]<sp/>=<sp/>A[5];</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[5]<sp/>=<sp/>A[4];</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[4]<sp/>=<sp/>A[3];</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[3]<sp/>=<sp/>A[2];</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[2]<sp/>=<sp/>A[1];</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[1]<sp/>=<sp/>A[0];</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[0]<sp/>=<sp/>temp1;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>INFRA_SHA256_SMALLER<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GET_UINT32_BE(W[i],<sp/>data,<sp/>4<sp/>*<sp/>i);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P(A[0],<sp/>A[1],<sp/>A[2],<sp/>A[3],<sp/>A[4],<sp/>A[5],<sp/>A[6],<sp/>A[7],<sp/>W[i<sp/>+<sp/>0],<sp/>K[i<sp/>+<sp/>0]);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P(A[7],<sp/>A[0],<sp/>A[1],<sp/>A[2],<sp/>A[3],<sp/>A[4],<sp/>A[5],<sp/>A[6],<sp/>W[i<sp/>+<sp/>1],<sp/>K[i<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P(A[6],<sp/>A[7],<sp/>A[0],<sp/>A[1],<sp/>A[2],<sp/>A[3],<sp/>A[4],<sp/>A[5],<sp/>W[i<sp/>+<sp/>2],<sp/>K[i<sp/>+<sp/>2]);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P(A[5],<sp/>A[6],<sp/>A[7],<sp/>A[0],<sp/>A[1],<sp/>A[2],<sp/>A[3],<sp/>A[4],<sp/>W[i<sp/>+<sp/>3],<sp/>K[i<sp/>+<sp/>3]);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P(A[4],<sp/>A[5],<sp/>A[6],<sp/>A[7],<sp/>A[0],<sp/>A[1],<sp/>A[2],<sp/>A[3],<sp/>W[i<sp/>+<sp/>4],<sp/>K[i<sp/>+<sp/>4]);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P(A[3],<sp/>A[4],<sp/>A[5],<sp/>A[6],<sp/>A[7],<sp/>A[0],<sp/>A[1],<sp/>A[2],<sp/>W[i<sp/>+<sp/>5],<sp/>K[i<sp/>+<sp/>5]);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P(A[2],<sp/>A[3],<sp/>A[4],<sp/>A[5],<sp/>A[6],<sp/>A[7],<sp/>A[0],<sp/>A[1],<sp/>W[i<sp/>+<sp/>6],<sp/>K[i<sp/>+<sp/>6]);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P(A[1],<sp/>A[2],<sp/>A[3],<sp/>A[4],<sp/>A[5],<sp/>A[6],<sp/>A[7],<sp/>A[0],<sp/>W[i<sp/>+<sp/>7],<sp/>K[i<sp/>+<sp/>7]);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>16;<sp/>i<sp/>&lt;<sp/>64;<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P(A[0],<sp/>A[1],<sp/>A[2],<sp/>A[3],<sp/>A[4],<sp/>A[5],<sp/>A[6],<sp/>A[7],<sp/>R(i<sp/>+<sp/>0),<sp/>K[i<sp/>+<sp/>0]);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P(A[7],<sp/>A[0],<sp/>A[1],<sp/>A[2],<sp/>A[3],<sp/>A[4],<sp/>A[5],<sp/>A[6],<sp/>R(i<sp/>+<sp/>1),<sp/>K[i<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P(A[6],<sp/>A[7],<sp/>A[0],<sp/>A[1],<sp/>A[2],<sp/>A[3],<sp/>A[4],<sp/>A[5],<sp/>R(i<sp/>+<sp/>2),<sp/>K[i<sp/>+<sp/>2]);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P(A[5],<sp/>A[6],<sp/>A[7],<sp/>A[0],<sp/>A[1],<sp/>A[2],<sp/>A[3],<sp/>A[4],<sp/>R(i<sp/>+<sp/>3),<sp/>K[i<sp/>+<sp/>3]);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P(A[4],<sp/>A[5],<sp/>A[6],<sp/>A[7],<sp/>A[0],<sp/>A[1],<sp/>A[2],<sp/>A[3],<sp/>R(i<sp/>+<sp/>4),<sp/>K[i<sp/>+<sp/>4]);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P(A[3],<sp/>A[4],<sp/>A[5],<sp/>A[6],<sp/>A[7],<sp/>A[0],<sp/>A[1],<sp/>A[2],<sp/>R(i<sp/>+<sp/>5),<sp/>K[i<sp/>+<sp/>5]);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P(A[2],<sp/>A[3],<sp/>A[4],<sp/>A[5],<sp/>A[6],<sp/>A[7],<sp/>A[0],<sp/>A[1],<sp/>R(i<sp/>+<sp/>6),<sp/>K[i<sp/>+<sp/>6]);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P(A[1],<sp/>A[2],<sp/>A[3],<sp/>A[4],<sp/>A[5],<sp/>A[6],<sp/>A[7],<sp/>A[0],<sp/>R(i<sp/>+<sp/>7),<sp/>K[i<sp/>+<sp/>7]);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INFRA_SHA256_SMALLER<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structiot__sha256__context_1a7e7dd244818f8acb0e22c041fd18fceb" kindref="member">state</ref>[i]<sp/>+=<sp/>A[i];</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>utilsSha256Update(<ref refid="structiot__sha256__context" kindref="compound">iot_sha256_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,<sp/>uint32_t<sp/>ilen)</highlight></codeline>
<codeline lineno="188"><highlight class="normal">{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>fill;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>left;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ilen<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>ctx-&gt;<ref refid="structiot__sha256__context_1a097a654e2edb579290bc5c38dbe2e6d5" kindref="member">total</ref>[0]<sp/>&amp;<sp/>0x3F;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>fill<sp/>=<sp/>64<sp/>-<sp/>left;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structiot__sha256__context_1a097a654e2edb579290bc5c38dbe2e6d5" kindref="member">total</ref>[0]<sp/>+=<sp/>(uint32_t)<sp/>ilen;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structiot__sha256__context_1a097a654e2edb579290bc5c38dbe2e6d5" kindref="member">total</ref>[0]<sp/>&amp;=<sp/>0xFFFFFFFF;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;<ref refid="structiot__sha256__context_1a097a654e2edb579290bc5c38dbe2e6d5" kindref="member">total</ref>[0]<sp/>&lt;<sp/>(uint32_t)<sp/>ilen)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structiot__sha256__context_1a097a654e2edb579290bc5c38dbe2e6d5" kindref="member">total</ref>[1]++;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left<sp/>&amp;&amp;<sp/>ilen<sp/>&gt;=<sp/>fill)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(ctx-&gt;<ref refid="structiot__sha256__context_1a15103073c498a6c38c17bdb04150f8e4" kindref="member">buffer</ref><sp/>+<sp/>left),<sp/>input,<sp/>fill);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>utilsSha256Process(ctx,<sp/>ctx-&gt;<ref refid="structiot__sha256__context_1a15103073c498a6c38c17bdb04150f8e4" kindref="member">buffer</ref>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>+=<sp/>fill;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ilen<sp/><sp/>-=<sp/>fill;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ilen<sp/>&gt;=<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>utilsSha256Process(ctx,<sp/>input);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>+=<sp/>64;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ilen<sp/><sp/>-=<sp/>64;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ilen<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(ctx-&gt;<ref refid="structiot__sha256__context_1a15103073c498a6c38c17bdb04150f8e4" kindref="member">buffer</ref><sp/>+<sp/>left),<sp/>input,<sp/>ilen);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sha256_padding[64]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>0x80,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0</highlight></codeline>
<codeline lineno="230"><highlight class="normal">};</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>utilsSha256Finish(<ref refid="structiot__sha256__context" kindref="compound">iot_sha256_context</ref><sp/>*ctx,<sp/>uint8_t<sp/>output[32])</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>last,<sp/>padn;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>high,<sp/>low;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>msglen[8];</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>high<sp/>=<sp/>(ctx-&gt;<ref refid="structiot__sha256__context_1a097a654e2edb579290bc5c38dbe2e6d5" kindref="member">total</ref>[0]<sp/>&gt;&gt;<sp/>29)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(ctx-&gt;<ref refid="structiot__sha256__context_1a097a654e2edb579290bc5c38dbe2e6d5" kindref="member">total</ref>[1]<sp/>&lt;&lt;<sp/><sp/>3);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>low<sp/><sp/>=<sp/>(ctx-&gt;<ref refid="structiot__sha256__context_1a097a654e2edb579290bc5c38dbe2e6d5" kindref="member">total</ref>[0]<sp/>&lt;&lt;<sp/><sp/>3);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>PUT_UINT32_BE(high,<sp/>msglen,<sp/>0);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>PUT_UINT32_BE(low,<sp/><sp/>msglen,<sp/>4);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>last<sp/>=<sp/>ctx-&gt;<ref refid="structiot__sha256__context_1a097a654e2edb579290bc5c38dbe2e6d5" kindref="member">total</ref>[0]<sp/>&amp;<sp/>0x3F;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>padn<sp/>=<sp/>(last<sp/>&lt;<sp/>56)<sp/>?<sp/>(56<sp/>-<sp/>last)<sp/>:<sp/>(120<sp/>-<sp/>last);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>utilsSha256Update(ctx,<sp/>sha256_padding,<sp/>padn);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>utilsSha256Update(ctx,<sp/>msglen,<sp/>8);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>PUT_UINT32_BE(ctx-&gt;<ref refid="structiot__sha256__context_1a7e7dd244818f8acb0e22c041fd18fceb" kindref="member">state</ref>[0],<sp/>output,<sp/><sp/>0);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>PUT_UINT32_BE(ctx-&gt;<ref refid="structiot__sha256__context_1a7e7dd244818f8acb0e22c041fd18fceb" kindref="member">state</ref>[1],<sp/>output,<sp/><sp/>4);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>PUT_UINT32_BE(ctx-&gt;<ref refid="structiot__sha256__context_1a7e7dd244818f8acb0e22c041fd18fceb" kindref="member">state</ref>[2],<sp/>output,<sp/><sp/>8);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>PUT_UINT32_BE(ctx-&gt;<ref refid="structiot__sha256__context_1a7e7dd244818f8acb0e22c041fd18fceb" kindref="member">state</ref>[3],<sp/>output,<sp/>12);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>PUT_UINT32_BE(ctx-&gt;<ref refid="structiot__sha256__context_1a7e7dd244818f8acb0e22c041fd18fceb" kindref="member">state</ref>[4],<sp/>output,<sp/>16);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>PUT_UINT32_BE(ctx-&gt;<ref refid="structiot__sha256__context_1a7e7dd244818f8acb0e22c041fd18fceb" kindref="member">state</ref>[5],<sp/>output,<sp/>20);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>PUT_UINT32_BE(ctx-&gt;<ref refid="structiot__sha256__context_1a7e7dd244818f8acb0e22c041fd18fceb" kindref="member">state</ref>[6],<sp/>output,<sp/>24);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;<ref refid="structiot__sha256__context_1aae8823e11620c906fb0ebe436c8766af" kindref="member">is224</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PUT_UINT32_BE(ctx-&gt;<ref refid="structiot__sha256__context_1a7e7dd244818f8acb0e22c041fd18fceb" kindref="member">state</ref>[7],<sp/>output,<sp/>28);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>utilsSha256(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*input,<sp/>uint32_t<sp/>ilen,<sp/>uint8_t<sp/>output[32])</highlight></codeline>
<codeline lineno="265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structiot__sha256__context" kindref="compound">iot_sha256_context</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>utilsSha256Init(&amp;ctx);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>utilsSha256Starts(&amp;ctx);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>utilsSha256Update(&amp;ctx,<sp/>input,<sp/>ilen);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>utilsSha256Finish(&amp;ctx,<sp/>output);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>utilsSha256Free(&amp;ctx);</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>utilsHmacSha256(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*msg,<sp/>uint32_t<sp/>msg_len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*key,<sp/>uint32_t<sp/>key_len,<sp/>uint8_t<sp/>output[32])</highlight></codeline>
<codeline lineno="276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structiot__sha256__context" kindref="compound">iot_sha256_context</ref><sp/>context;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>k_ipad[SHA256_KEY_IOPAD_SIZE];<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>inner<sp/>padding<sp/>-<sp/>key<sp/>XORd<sp/>with<sp/>ipad<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>k_opad[SHA256_KEY_IOPAD_SIZE];<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>outer<sp/>padding<sp/>-<sp/>key<sp/>XORd<sp/>with<sp/>opad<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>i;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((NULL<sp/>==<sp/>msg)<sp/>||<sp/>(NULL<sp/>==<sp/>key)<sp/>||<sp/>(NULL<sp/>==<sp/>output))<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key_len<sp/>&gt;<sp/>SHA256_KEY_IOPAD_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>start<sp/>out<sp/>by<sp/>storing<sp/>key<sp/>in<sp/>pads<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(k_ipad,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(k_ipad));</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(k_opad,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(k_opad));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(k_ipad,<sp/>key,<sp/>key_len);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(k_opad,<sp/>key,<sp/>key_len);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>XOR<sp/>key<sp/>with<sp/>ipad<sp/>and<sp/>opad<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>SHA256_KEY_IOPAD_SIZE;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_ipad[i]<sp/>^=<sp/>0x36;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_opad[i]<sp/>^=<sp/>0x5c;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>perform<sp/>inner<sp/>SHA<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>utilsSha256Init(&amp;context);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>init<sp/>context<sp/>for<sp/>1st<sp/>pass<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>utilsSha256Starts(&amp;context);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>setup<sp/>context<sp/>for<sp/>1st<sp/>pass<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>utilsSha256Update(&amp;context,<sp/>k_ipad,<sp/>SHA256_KEY_IOPAD_SIZE);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>start<sp/>with<sp/>inner<sp/>pad<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>utilsSha256Update(&amp;context,<sp/>msg,<sp/>msg_len);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>then<sp/>text<sp/>of<sp/>datagram<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>utilsSha256Finish(&amp;context,<sp/>output);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>finish<sp/>up<sp/>1st<sp/>pass<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>perform<sp/>outer<sp/>SHA<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>utilsSha256Init(&amp;context);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>init<sp/>context<sp/>for<sp/>2nd<sp/>pass<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>utilsSha256Starts(&amp;context);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>setup<sp/>context<sp/>for<sp/>2nd<sp/>pass<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>utilsSha256Update(&amp;context,<sp/>k_opad,<sp/>SHA256_KEY_IOPAD_SIZE);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>start<sp/>with<sp/>outer<sp/>pad<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>utilsSha256Update(&amp;context,<sp/>output,<sp/>SHA256_DIGEST_SIZE);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>then<sp/>results<sp/>of<sp/>1st<sp/>hash<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>utilsSha256Finish(&amp;context,<sp/>output);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>finish<sp/>up<sp/>2nd<sp/>pass<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="main/atprocess/infra_sha256.c"/>
  </compounddef>
</doxygen>
