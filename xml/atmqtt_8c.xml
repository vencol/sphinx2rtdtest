<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="atmqtt_8c" kind="file" language="C++">
    <compoundname>atmqtt.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="yes">esp_system.h</includes>
    <includes local="yes">esp_log.h</includes>
    <includes refid="iotinfo_8h" local="yes">iotinfo.h</includes>
    <includes refid="atcmd_8h" local="yes">atcmd.h</includes>
    <includes refid="atmqtt_8h" local="yes">atmqtt.h</includes>
    <incdepgraph>
      <node id="6">
        <label>iotinfo.h</label>
        <link refid="iotinfo_8h_source"/>
      </node>
      <node id="4">
        <label>esp_system.h</label>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>esp_log.h</label>
      </node>
      <node id="7">
        <label>atcmd.h</label>
        <link refid="atcmd_8h_source"/>
      </node>
      <node id="1">
        <label>main/atprocess/atmqtt.c</label>
        <link refid="atmqtt_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>atmqtt.h</label>
        <link refid="atmqtt_8h_source"/>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structatmqtt__module__t" prot="public">atmqtt_module_t</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="atmqtt_8c_1a98c24dc9eb271dd1b713bfa38220de12" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* ATTAG</definition>
        <argsstring></argsstring>
        <name>ATTAG</name>
        <initializer>= &quot;atmqtt&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/atmqtt.c" line="16" column="19" bodyfile="main/atprocess/atmqtt.c" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="atmqtt_8c_1a9fb6f455dd790bb0b781c0efbfaedc43" prot="public" static="yes" mutable="no">
        <type><ref refid="structatmqtt__module__t" kindref="compound">atmqtt_module_t</ref></type>
        <definition>atmqtt_module_t atmqtt_module</definition>
        <argsstring></argsstring>
        <name>atmqtt_module</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/atmqtt.c" line="28" column="24" bodyfile="main/atprocess/atmqtt.c" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="atmqtt_8c_1a011b391307113b46be5740fc26526a50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int atMqttCallBackInit</definition>
        <argsstring>(void(*IotMqttOperatoinCb)(unsigned char), void(*IotMqttReceiveCb)(char *, char *))</argsstring>
        <name>atMqttCallBackInit</name>
        <param>
          <type>void(*)(unsigned char)</type>
          <declname>IotMqttOperatoinCb</declname>
        </param>
        <param>
          <type>void(*)(char *, char *)</type>
          <declname>IotMqttReceiveCb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/atmqtt.c" line="30" column="5" bodyfile="main/atprocess/atmqtt.c" bodystart="30" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="atmqtt_8c_1ac390eff1096a7609eb0ad7f4b868464b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int atMqttInfoInit</definition>
        <argsstring>(char secureMode)</argsstring>
        <name>atMqttInfoInit</name>
        <param>
          <type>char</type>
          <declname>secureMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/atmqtt.c" line="38" column="5" bodyfile="main/atprocess/atmqtt.c" bodystart="38" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="atmqtt_8c_1aa4ddb6015c941f41f2eee98977583012" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int atSetMqttAccq</definition>
        <argsstring>(const char *clientid, unsigned char securemode)</argsstring>
        <name>atSetMqttAccq</name>
        <param>
          <type>const char *</type>
          <declname>clientid</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>securemode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/atmqtt.c" line="48" column="12" bodyfile="main/atprocess/atmqtt.c" bodystart="48" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="atmqtt_8c_1a16151babb26023f956507593f791deae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int atSetMqttConnect</definition>
        <argsstring>(unsigned int keepalive, unsigned char cleansession, iotinfo_module_t *pmqtt_module)</argsstring>
        <name>atSetMqttConnect</name>
        <param>
          <type>unsigned int</type>
          <declname>keepalive</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>cleansession</declname>
        </param>
        <param>
          <type><ref refid="structiotinfo__module__t" kindref="compound">iotinfo_module_t</ref> *</type>
          <declname>pmqtt_module</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/atmqtt.c" line="78" column="12" bodyfile="main/atprocess/atmqtt.c" bodystart="78" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="atmqtt_8c_1a227fef3aa18f198536f58e43419e2d51" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int atSubMqttConnect</definition>
        <argsstring>(void)</argsstring>
        <name>atSubMqttConnect</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/atmqtt.c" line="109" column="12" bodyfile="main/atprocess/atmqtt.c" bodystart="109" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="atmqtt_8c_1a3c705b12e5d14960ed80b35c1a975aa6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int atUnSubMqttConnect</definition>
        <argsstring>(void)</argsstring>
        <name>atUnSubMqttConnect</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/atmqtt.c" line="136" column="12" bodyfile="main/atprocess/atmqtt.c" bodystart="136" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="atmqtt_8c_1a03a19a6ffdc849b89e0dce852fa513e6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int atPubMqttTopicPayload</definition>
        <argsstring>(char *payload)</argsstring>
        <name>atPubMqttTopicPayload</name>
        <param>
          <type>char *</type>
          <declname>payload</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/atmqtt.c" line="163" column="12" bodyfile="main/atprocess/atmqtt.c" bodystart="163" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="atmqtt_8c_1a7d012eeb9683b87ec3d62ea03e317fb2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int atPublishMqttConnect</definition>
        <argsstring>(unsigned char qos, unsigned char retain, unsigned char dup, unsigned char timeout)</argsstring>
        <name>atPublishMqttConnect</name>
        <param>
          <type>unsigned char</type>
          <declname>qos</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>retain</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>dup</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/atmqtt.c" line="195" column="12" bodyfile="main/atprocess/atmqtt.c" bodystart="195" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="atmqtt_8c_1a98e1e931ece782c027a2f55b4060ca2d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int atReleaseMqttSession</definition>
        <argsstring>(void)</argsstring>
        <name>atReleaseMqttSession</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/atmqtt.c" line="223" column="12" bodyfile="main/atprocess/atmqtt.c" bodystart="223" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="atmqtt_8c_1a914827aecf9cc787751b2a75f35be08a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void atPraseMqttReceive</definition>
        <argsstring>(char *recbuf, int len)</argsstring>
        <name>atPraseMqttReceive</name>
        <param>
          <type>char *</type>
          <declname>recbuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/atmqtt.c" line="251" column="13" bodyfile="main/atprocess/atmqtt.c" bodystart="251" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="atmqtt_8c_1a0c5266f141cdd6e75cad01f08f3b3c93" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void atPraseMqttOk</definition>
        <argsstring>(char *recbuf, int len)</argsstring>
        <name>atPraseMqttOk</name>
        <param>
          <type>char *</type>
          <declname>recbuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/atmqtt.c" line="349" column="13" bodyfile="main/atprocess/atmqtt.c" bodystart="349" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="atmqtt_8c_1a0ea843b12c0b8becd76d9f5c0c894c0c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void specialMqttOperatoinCb</definition>
        <argsstring>(char *recbuf, int type)</argsstring>
        <name>specialMqttOperatoinCb</name>
        <param>
          <type>char *</type>
          <declname>recbuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/atmqtt.c" line="411" column="13" bodyfile="main/atprocess/atmqtt.c" bodystart="411" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="atmqtt_8c_1a16c4d2496f278a802e628de277a095d1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void atPraseMqttSpecial</definition>
        <argsstring>(char *recbuf, int len)</argsstring>
        <name>atPraseMqttSpecial</name>
        <param>
          <type>char *</type>
          <declname>recbuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/atmqtt.c" line="428" column="13" bodyfile="main/atprocess/atmqtt.c" bodystart="428" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="atmqtt_8c_1a05fba9c35655c8af9cab71eb75adcf64" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void atPraseMqttError</definition>
        <argsstring>(char *recbuf, int len)</argsstring>
        <name>atPraseMqttError</name>
        <param>
          <type>char *</type>
          <declname>recbuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/atmqtt.c" line="471" column="13" bodyfile="main/atprocess/atmqtt.c" bodystart="471" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="atmqtt_8c_1a9605b9a3828a22e8c9973277a8f136a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atPraseMqttCmd</definition>
        <argsstring>(char *recbuf, int len)</argsstring>
        <name>atPraseMqttCmd</name>
        <param>
          <type>char *</type>
          <declname>recbuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/atmqtt.c" line="482" column="6" bodyfile="main/atprocess/atmqtt.c" bodystart="482" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="atmqtt_8c_1a11f6e131904afb93282ca97543ea8582" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int atConnectMqtt</definition>
        <argsstring>(unsigned char timeout)</argsstring>
        <name>atConnectMqtt</name>
        <param>
          <type>unsigned char</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/atmqtt.c" line="493" column="5" bodyfile="main/atprocess/atmqtt.c" bodystart="493" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="atmqtt_8c_1accab9e16514ea05a71df42c212b21e1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int atDisconnectMqtt</definition>
        <argsstring>(unsigned char timeout)</argsstring>
        <name>atDisconnectMqtt</name>
        <param>
          <type>unsigned char</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/atmqtt.c" line="502" column="5" bodyfile="main/atprocess/atmqtt.c" bodystart="502" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="atmqtt_8c_1aa3b038eb86d6074ba3d8723b60f28363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int atSubMqttTopic</definition>
        <argsstring>(unsigned char qos, char *topic)</argsstring>
        <name>atSubMqttTopic</name>
        <param>
          <type>unsigned char</type>
          <declname>qos</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>topic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/atmqtt.c" line="530" column="5" bodyfile="main/atprocess/atmqtt.c" bodystart="530" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="atmqtt_8c_1a703f40c909e93e6c1e1b8ed151e8b7af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int atUnSubMqttTopic</definition>
        <argsstring>(unsigned char dup, char *topic)</argsstring>
        <name>atUnSubMqttTopic</name>
        <param>
          <type>unsigned char</type>
          <declname>dup</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>topic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/atmqtt.c" line="563" column="5" bodyfile="main/atprocess/atmqtt.c" bodystart="563" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="atmqtt_8c_1ae1a02cb2c54e03b8025f497bab914b0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int atPublishMqttTopic</definition>
        <argsstring>(char *topic, char *payload)</argsstring>
        <name>atPublishMqttTopic</name>
        <param>
          <type>char *</type>
          <declname>topic</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>payload</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/atprocess/atmqtt.c" line="595" column="5" bodyfile="main/atprocess/atmqtt.c" bodystart="595" bodyend="637"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>WiFi<sp/>station<sp/>Example</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/>This<sp/>example<sp/>code<sp/>is<sp/>in<sp/>the<sp/>Public<sp/>Domain<sp/>(or<sp/>CC0<sp/>licensed,<sp/>at<sp/>your<sp/>option.)</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>this</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/>software<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_system.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_log.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;iotinfo.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;atcmd.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;atmqtt.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ATTAG<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;atmqtt&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>pack(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="structatmqtt__module__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>void<sp/>(*IotMqttOperatoinCb)(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>status);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>void<sp/>(*IotMqttReceiveCb)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*topic,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*payload);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mqttClienNum<sp/><sp/><sp/><sp/>:<sp/>2;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qos<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>2;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dup<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>2;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>retain<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>2;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}<sp/><ref refid="structatmqtt__module__t" kindref="compound">atmqtt_module_t</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>pack()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structatmqtt__module__t" kindref="compound">atmqtt_module_t</ref><sp/>atmqtt_module;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atMqttCallBackInit(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*IotMqttOperatoinCb)(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*IotMqttReceiveCb)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*))</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IotMqttOperatoinCb<sp/>==<sp/>NULL<sp/>||<sp/>IotMqttReceiveCb<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>atmqtt_module.IotMqttOperatoinCb<sp/><sp/>=<sp/>IotMqttOperatoinCb;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>atmqtt_module.IotMqttReceiveCb<sp/><sp/><sp/><sp/>=<sp/>IotMqttReceiveCb;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atMqttInfoInit(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>secureMode)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>iotinfo_module.secureMode<sp/>=<sp/>secureMode;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>atmqtt_module.mqttClienNum<sp/>=<sp/>AT_CMD_MQTT_CLIENT_NUM;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(getMqttInfo(&amp;iotinfo_module)<sp/>==0<sp/>)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>getMqttInfo<sp/>success&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atSetMqttAccq(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>clientid,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>securemode)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret=0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sendbuf=NULL;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>clientnum<sp/>=<sp/>atmqtt_module.mqttClienNum;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clientnum<sp/>&gt;<sp/>AT_CMD_MQTT_CLIENT_MAXNUM<sp/>||<sp/>securemode<sp/>&gt;<sp/>AT_CMD_MQTT_SECURE_MAXNUM<sp/>||<sp/>clientid<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>sendbuf<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc(<sp/>strlen(AT_CMD_ATCMQTTACCQ_SEND)<sp/>+<sp/>strlen(clientid));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sendbuf<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(securemode<sp/>==<sp/>MODE_TCP_DIRECT_PLAIN)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>snprintf(sendbuf,<sp/>128,<sp/>AT_CMD_ATCMQTTACCQ_SEND,<sp/>clientnum,<sp/>clientid,<sp/>0);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>snprintf(sendbuf,<sp/>128,<sp/>AT_CMD_ATCMQTTACCQ_SEND,<sp/>clientnum,<sp/>clientid,<sp/>1);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret<sp/>&lt;<sp/>128)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>ATCMQTTACCQ<sp/>[%s]&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>,<sp/>sendbuf);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>atMallocCmd(ATCMQTTACCQ,<sp/>sendbuf,<sp/>AT_CMD_ATCMQTTACCQ_RESPOND)<sp/>==<sp/>0)<sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atSendCmdChange(ATCMQTTACCQ,<sp/>sendbuf,<sp/>AT_CMD_ATCMQTTACCQ_RESPOND,<sp/>AT_CMD_ATCMQTTACCQ_TIMEOUT,<sp/>AT_CMD_ATCMQTTACCQ_RETRY);<sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret=-1;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=-1;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>free(sendbuf);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>sendbuf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atSetMqttConnect(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keepalive,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cleansession,<sp/><ref refid="structiotinfo__module__t" kindref="compound">iotinfo_module_t</ref><sp/>*pmqtt_module)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret=0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sendbuf=NULL;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>clientnum<sp/>=<sp/>atmqtt_module.mqttClienNum;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clientnum<sp/>&gt;<sp/>AT_CMD_MQTT_CLIENT_MAXNUM<sp/>||<sp/>cleansession<sp/>&gt;<sp/>AT_CMD_ATCMQTTCONNECT_CLEANSEESION_MAX<sp/>||<sp/>keepalive<sp/>&gt;<sp/>AT_CMD_ATCMQTTCONNECT_KEEPALIVE_MAX<sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>pmqtt_module-&gt;iotDomain<sp/>==<sp/>NULL<sp/>||<sp/>pmqtt_module-&gt;userName<sp/>==<sp/>NULL<sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>pmqtt_module-&gt;passWord<sp/>==<sp/>NULL<sp/>||<sp/>pmqtt_module-&gt;iotPort<sp/>&lt;=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>sendbuf<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc(<sp/>AT_CMD_ATCMQTTCONNECT_SEND_MAXLEN<sp/>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sendbuf<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>snprintf(sendbuf,<sp/>AT_CMD_ATCMQTTCONNECT_SEND_MAXLEN,<sp/>AT_CMD_ATCMQTTCONNECT_SEND,<sp/>clientnum,<sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pmqtt_module-&gt;productKey,<sp/>pmqtt_module-&gt;iotDomain,<sp/>pmqtt_module-&gt;iotPort,<sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keepalive,<sp/>cleansession,<sp/>pmqtt_module-&gt;userName,<sp/>pmqtt_module-&gt;passWord);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret<sp/>&lt;<sp/>AT_CMD_ATCMQTTCONNECT_SEND_MAXLEN)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>ATCMQTTCONNECT<sp/>&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>atMallocCmd(ATCMQTTCONNECT,<sp/>sendbuf,<sp/>AT_CMD_ATCMQTTCONNECT_RESPOND)<sp/>==<sp/>0)<sp/><sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atSendCmdChange(ATCMQTTCONNECT,<sp/>sendbuf,<sp/>AT_CMD_ATCMQTTCONNECT_RESPOND,<sp/>AT_CMD_ATCMQTTCONNECT_TIMEOUT,<sp/>AT_CMD_ATCMQTTCONNECT_RETRY);<sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret=-1;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=-1;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>free(sendbuf);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>sendbuf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atSubMqttConnect(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret=0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sendbuf=NULL;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>clientnum<sp/>=<sp/>atmqtt_module.mqttClienNum;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clientnum<sp/>&gt;<sp/>AT_CMD_MQTT_CLIENT_MAXNUM<sp/>)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>sendbuf<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc(<sp/>strlen(AT_CMD_ATCMQTTSUB_SEND)<sp/>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sendbuf<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>snprintf(sendbuf,<sp/>strlen(AT_CMD_ATCMQTTSUB_SEND),<sp/>AT_CMD_ATCMQTTSUB_SEND,<sp/>clientnum);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret<sp/>&lt;<sp/>strlen(AT_CMD_ATCMQTTSUB_SEND))</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>ATCMQTTSUB<sp/>[%s]&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>,<sp/>sendbuf);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>atMallocCmd(ATCMQTTSUB,<sp/>sendbuf,<sp/>AT_CMD_ATCMQTTSUB_RESPOND)<sp/>==<sp/>0)<sp/><sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atSendCmdChange(ATCMQTTSUB,<sp/>sendbuf,<sp/>AT_CMD_ATCMQTTSUB_RESPOND,<sp/>AT_CMD_ATCMQTTSUB_TIMEOUT,<sp/>AT_CMD_ATCMQTTSUB_RETRY);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret=-1;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=-1;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>free(sendbuf);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>sendbuf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atUnSubMqttConnect(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret=0;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sendbuf=NULL;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>clientnum<sp/>=<sp/>atmqtt_module.mqttClienNum;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clientnum<sp/>&gt;<sp/>AT_CMD_MQTT_CLIENT_MAXNUM<sp/>)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>sendbuf<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc(<sp/>strlen(AT_CMD_ATCMQTTUNSUB_SEND)<sp/>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sendbuf<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>snprintf(sendbuf,<sp/>strlen(AT_CMD_ATCMQTTUNSUB_SEND),<sp/>AT_CMD_ATCMQTTUNSUB_SEND,<sp/>clientnum);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret<sp/>&lt;<sp/>strlen(AT_CMD_ATCMQTTUNSUB_SEND))</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>ATCMQTTUNSUB<sp/>[%s]&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>,<sp/>sendbuf);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>atMallocCmd(ATCMQTTUNSUB,<sp/>sendbuf,<sp/>AT_CMD_ATCMQTTUNSUB_RESPOND)<sp/>==<sp/>0)<sp/><sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atSendCmdChange(ATCMQTTUNSUB,<sp/>sendbuf,<sp/>AT_CMD_ATCMQTTUNSUB_RESPOND,<sp/>AT_CMD_ATCMQTTUNSUB_TIMEOUT,<sp/>AT_CMD_ATCMQTTUNSUB_RETRY);<sp/></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret=-1;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=-1;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>free(sendbuf);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>sendbuf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atPubMqttTopicPayload(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*payload)</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret=0;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sendbuf=NULL;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>clientnum<sp/>=<sp/>atmqtt_module.mqttClienNum;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>strlen(payload);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clientnum<sp/>&gt;<sp/>AT_CMD_MQTT_CLIENT_MAXNUM<sp/>||<sp/>payload<sp/>==<sp/>NULL<sp/>||<sp/>ret<sp/>&lt;<sp/>1<sp/>||<sp/>ret<sp/>&gt;<sp/>AT_CMD_MQTT_MAX_PAYLOAD_LEN)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>strlen(AT_CMD_ATCMQTTPAYLOAD_SEND)<sp/>+<sp/>4;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>sendbuf<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc(<sp/>ret<sp/>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sendbuf<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>snprintf(sendbuf,<sp/>ret,<sp/>AT_CMD_ATCMQTTPAYLOAD_SEND,<sp/>clientnum,<sp/>strlen(payload));</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret<sp/>&lt;<sp/>strlen(AT_CMD_ATCMQTTPAYLOAD_SEND)<sp/>+<sp/>4)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=0;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>ATCMQTTPAYLOAD<sp/>[%s]&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>,<sp/>sendbuf);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>atMallocCmd(ATCMQTTPAYLOAD,<sp/>sendbuf,<sp/>payload)<sp/>==<sp/>0)<sp/><sp/></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_atcmd_uri_map_send.wait<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ATCMD_WAIT_INPUT;<sp/></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atSendCmdChange(ATCMQTTPAYLOAD,<sp/>sendbuf,<sp/>payload,<sp/>AT_CMD_ATCMQTTPAYLOAD_TIMEOUT,<sp/>AT_CMD_ATCMQTTPAYLOAD_RETRY);<sp/></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret=-1;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=-1;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>free(sendbuf);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>sendbuf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atPublishMqttConnect(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>qos,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>retain,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dup,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>timeout)</highlight></codeline>
<codeline lineno="196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret=0;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sendbuf=NULL;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>clientnum<sp/>=<sp/>atmqtt_module.mqttClienNum;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clientnum<sp/>&gt;<sp/>AT_CMD_MQTT_CLIENT_MAXNUM<sp/>||<sp/>qos<sp/>&gt;<sp/>AT_CMD_MQTT_QOS_MAXNUM<sp/>||<sp/>dup<sp/>&gt;<sp/>AT_CMD_MQTT_DUP_MAXNUM<sp/>||<sp/>retain<sp/>&gt;<sp/>AT_CMD_MQTT_RETAIN_MAXNUM<sp/></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>timeout<sp/>&lt;<sp/>AT_CMD_ATCMQTTPUB_TIMEOUT_MINI<sp/>||<sp/>retain<sp/>&gt;<sp/>AT_CMD_ATCMQTTPUB_TIMEOUT_MAX<sp/>)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>sendbuf<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc(<sp/>strlen(AT_CMD_ATCMQTTPUB_SEND)<sp/>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sendbuf<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>snprintf(sendbuf,<sp/>strlen(AT_CMD_ATCMQTTPUB_SEND),<sp/>AT_CMD_ATCMQTTPUB_SEND,<sp/>clientnum,<sp/>qos,<sp/>timeout,<sp/>retain,<sp/>dup);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret<sp/>&lt;<sp/>strlen(AT_CMD_ATCMQTTPUB_SEND))</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=0;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>ATCMQTTPUB<sp/>[%s]&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>,<sp/>sendbuf);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>atMallocCmd(ATCMQTTPUB,<sp/>sendbuf,<sp/>AT_CMD_ATCMQTTPUB_RESPOND)<sp/>==<sp/>0)<sp/><sp/></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atSendCmdChange(ATCMQTTPUB,<sp/>sendbuf,<sp/>AT_CMD_ATCMQTTPUB_RESPOND,<sp/>AT_CMD_ATCMQTTPUB_TIMEOUT,<sp/>AT_CMD_ATCMQTTPUB_RETRY);<sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret=-1;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=-1;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>free(sendbuf);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>sendbuf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atReleaseMqttSession(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret=0;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sendbuf=NULL;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>clientnum<sp/>=<sp/>atmqtt_module.mqttClienNum;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clientnum<sp/>&gt;<sp/>AT_CMD_MQTT_CLIENT_MAXNUM)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>strlen(AT_CMD_ATCMQTTREL_SEND);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>sendbuf<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc(<sp/>ret<sp/>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sendbuf<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>snprintf(sendbuf,<sp/>ret,<sp/>AT_CMD_ATCMQTTREL_SEND,<sp/>clientnum);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret<sp/>&lt;<sp/>strlen(AT_CMD_ATCMQTTREL_SEND)<sp/>)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=0;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>ATCMQTTREL<sp/>[%s]&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>,<sp/>sendbuf);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>atMallocCmd(ATCMQTTREL,<sp/>sendbuf,<sp/>AT_CMD_ATCMQTTREL_RESPOND)<sp/>==<sp/>0)<sp/><sp/></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atSendCmdChange(ATCMQTTREL,<sp/>sendbuf,<sp/>AT_CMD_ATCMQTTREL_RESPOND,<sp/>AT_CMD_ATCMQTTREL_TIMEOUT,<sp/>AT_CMD_ATCMQTTREL_RETRY);<sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret=-1;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=-1;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>free(sendbuf);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>sendbuf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>atPraseMqttReceive(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>recbuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str=NULL,<sp/>*str1=NULL;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*topic=NULL,<sp/>*payload=NULL;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>in<sp/><sp/>[%d]<sp/>&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__,<sp/>esp_get_free_heap_size());</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>topiclen=0,<sp/>payloadlen=0;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>str<sp/>=<sp/>strstr(recbuf,<sp/>AT_CMD_MQTT_RECEIVE_END);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if(atmqtt_module.IotMqttReceiveCb<sp/>&amp;&amp;<sp/>str)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if(len<sp/>&lt;<sp/>6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/><sp/><sp/>=<sp/>strstr(recbuf,<sp/>AT_CMD_MQTT_RECEIVE_START);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>str1<sp/><sp/>=<sp/>strstr(recbuf+2,<sp/></highlight><highlight class="stringliteral">&quot;\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(atmqtt_module.IotMqttReceiveCb<sp/>&amp;&amp;<sp/>str<sp/>&amp;&amp;<sp/>str1){</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Read<sp/>OK<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/>strchr(str,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(str<sp/>&amp;&amp;<sp/>str<sp/>&lt;<sp/>str1){</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>topiclen<sp/><sp/>=<sp/>atoi(str<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>strchr(str+1,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Read<sp/>OK<sp/>topiclen<sp/>[%d]&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>,<sp/>topiclen);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(str<sp/>&amp;&amp;<sp/>str<sp/>&lt;<sp/>str1){</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>payloadlen<sp/><sp/>=<sp/>atoi(str<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Read<sp/>OK<sp/>payloadlen<sp/>[%d]&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>,<sp/>payloadlen);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(topiclen<sp/>&amp;&amp;<sp/>payloadlen<sp/>&amp;&amp;<sp/>topiclen<sp/>&lt;<sp/>AT_CMD_MQTT_MAX_TOPIC_LEN)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/><sp/><sp/>=<sp/>strchr(str+1,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(str)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str1<sp/><sp/>=<sp/>strstr(str,<sp/></highlight><highlight class="stringliteral">&quot;\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(str<sp/>&amp;&amp;<sp/>str<sp/>&lt;<sp/>str1){</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ESP_LOGI(ATTAG,<sp/>&quot;%s<sp/>Read<sp/>OK<sp/>topic&quot;,<sp/>__FUNCTION__<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/><sp/>=<sp/>atoi(str<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(len<sp/>==<sp/>topiclen)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Read<sp/>OK<sp/>topic<sp/>len:%d&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>,<sp/>topiclen);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>topic<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)realloc(topic,<sp/>topiclen<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Read<sp/>OK<sp/>32<sp/>topic&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(topic){</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>payload<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)realloc(payload,<sp/>payloadlen<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(payload<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(topic);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>topic<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//get<sp/>topic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(topic,<sp/>str1+2,<sp/>topiclen);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(topic<sp/>+<sp/>topiclen<sp/>)<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Read<sp/>OK<sp/>topic<sp/>[%s]&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__,<sp/>topic<sp/>);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/>strchr(str1,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(str){</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>atoi(str<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str1<sp/><sp/>=<sp/>strstr(str,<sp/></highlight><highlight class="stringliteral">&quot;\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(str1)<sp/><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>topiclen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(len<sp/>&amp;&amp;<sp/>payloadlen<sp/>&gt;<sp/>topiclen){</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(payload+topiclen,<sp/>str1+2,<sp/>len);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>topiclen<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/><sp/>=<sp/>strstr(str1,<sp/></highlight><highlight class="stringliteral">&quot;+CMQTTRXPAYLOAD:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(str)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/>strchr(str,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(str)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>atoi(str<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str1<sp/><sp/>=<sp/>strstr(str,<sp/></highlight><highlight class="stringliteral">&quot;\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if(len<sp/>==<sp/>payloadlen)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if(payload)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>memcpy(payload,<sp/>str1+2,<sp/>payloadlen);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}//equ<sp/>payloadlen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>else<sp/>if(len<sp/>&amp;&amp;<sp/>len<sp/>&lt;<sp/>payloadlen)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(payload<sp/>+<sp/>payloadlen<sp/>)<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(atmqtt_module.IotMqttReceiveCb)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atmqtt_module.IotMqttReceiveCb(topic,<sp/>payload);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//payloadlen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(payload);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>payload<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(topic);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>topic<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//<sp/>equ<sp/>topiclen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//<sp/>topic<sp/>len<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//topic<sp/>len</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//both<sp/>len</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//AT_CMD_MQTT_RECEIVE_START</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}//AT_CMD_MQTT_RECEIVE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>out<sp/><sp/>[%d]<sp/>&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__,<sp/>esp_get_free_heap_size());</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>atPraseMqttOk(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>recbuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Read<sp/>OK<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(atcmd_current)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//start<sp/>connect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ATCMQTTSTART:</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>ATCMD_WAIT_SPECIAL(AT_CMD_ATCMQTTSTART_TIMEOUT);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ATCMQTTACCQ:</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>atSetMqttConnect(iotinfo_module.devparam-&gt;heartTime,<sp/>AT_CMD_MQTT_CLEAN_SESSION,&amp;iotinfo_module);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ATCMQTTCONNECT:</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>ATCMD_WAIT_SPECIAL(AT_CMD_ATCMQTTCONNECT_TIMEOUT);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//disconnect<sp/>stop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ATCMQTTDISC:</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>ATCMD_WAIT_SPECIAL(AT_CMD_ATCMQTTDISC_TIMEOUT);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ATCMQTTREL:</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(g_atcmd_uri_map_send.wait<sp/>==<sp/>ATCMD_WAIT_NONE)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATSENDCMD_CHANGE(ATCMQTTSTOP);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ATCMQTTSTOP:</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//subtopic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ATCMQTTSUBTOPIC:</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(g_atcmd_uri_map_send.wait<sp/>==<sp/>ATCMD_WAIT_NONE)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atSubMqttConnect();</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ATCMQTTSUB:</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>ATCMD_WAIT_SPECIAL(AT_CMD_ATCMQTTSUB_TIMEOUT);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unsubtopic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ATCMQTTUNSUBTOPIC:</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(g_atcmd_uri_map_send.wait<sp/>==<sp/>ATCMD_WAIT_NONE)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atUnSubMqttConnect();</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ATCMQTTUNSUB:</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATCMD_WAIT_SPECIAL(AT_CMD_ATCMQTTUNSUB_TIMEOUT);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//pubtopic<sp/>payload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ATCMQTTTOPIC:</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(g_atcmd_uri_map_send.wait<sp/>==<sp/>ATCMD_WAIT_NONE)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atPubMqttTopicPayload(g_atcmd_uri_map_send.payload);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ATCMQTTPAYLOAD:</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(g_atcmd_uri_map_send.wait<sp/>==<sp/>ATCMD_WAIT_NONE)</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atPublishMqttConnect(AT_CMD_MQTT_QOS,<sp/>AT_CMD_MQTT_DUP,<sp/>AT_CMD_MQTT_RETAIN,<sp/>AT_CMD_MQTT_TIMEOUT);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ATCMQTTPUB:</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>ATCMD_WAIT_SPECIAL(AT_CMD_ATCMQTTPUB_TIMEOUT);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>not<sp/>atcmd_current&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>specialMqttOperatoinCb(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>recbuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)</highlight></codeline>
<codeline lineno="412"><highlight class="normal">{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str=NULL;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(MQTT_DISCONNECT_SUCCESS<sp/>&gt;=<sp/>type<sp/>&amp;&amp;<sp/>MQTT_CONNECT_SUCCESS<sp/>&lt;=<sp/>type)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>str<sp/>=<sp/>strchr(recbuf,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(str<sp/>&amp;&amp;<sp/>atmqtt_module.IotMqttOperatoinCb)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(atoi(str+1)<sp/>==<sp/>0)<sp/><sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATSENDCMD_CHANGE_NULL();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atmqtt_module.IotMqttOperatoinCb(type);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atmqtt_module.IotMqttOperatoinCb(type<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;IotMqttOperatoinCb<sp/>fail<sp/>[type:%d]<sp/>Special<sp/>bytes<sp/>&quot;</highlight><highlight class="normal">,<sp/>type);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>atPraseMqttSpecial(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>recbuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Read<sp/>Special<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>g_atcmd_uri_map_send.wait<sp/>==<sp/>ATCMD_WAIT_ADD)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(atcmd_current<sp/>==<sp/>ATCMQTTSTART<sp/>&amp;&amp;<sp/>ATCMD_WAIT_SPECIAL_CMP(recbuf,<sp/>ATCMQTTSTART)<sp/>)<sp/><sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_atcmd_uri_map_send.wait<sp/>=<sp/>ATCMD_WAIT_NONE;</highlight><highlight class="comment">//only<sp/>one<sp/>receive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atSetMqttAccq(iotinfo_module.clientId,<sp/>iotinfo_module.secureMode);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(atcmd_current<sp/>==<sp/>ATCMQTTCONNECT<sp/>&amp;&amp;<sp/>ATCMD_WAIT_SPECIAL_CMP(recbuf,<sp/>ATCMQTTCONNECT)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_atcmd_uri_map_send.wait<sp/>=<sp/>ATCMD_WAIT_NONE;</highlight><highlight class="comment">//only<sp/>one<sp/>receive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>specialMqttOperatoinCb(recbuf,<sp/>MQTT_CONNECT_SUCCESS);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(atcmd_current<sp/>==<sp/>ATCMQTTSUB<sp/>&amp;&amp;<sp/>ATCMD_WAIT_SPECIAL_CMP(recbuf,<sp/>ATCMQTTSUB)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_atcmd_uri_map_send.wait<sp/>=<sp/>ATCMD_WAIT_NONE;</highlight><highlight class="comment">//only<sp/>one<sp/>receive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>specialMqttOperatoinCb(recbuf,<sp/>MQTT_CONNECT_SUB_SUCCESS);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(atcmd_current<sp/>==<sp/>ATCMQTTUNSUB<sp/>&amp;&amp;<sp/>ATCMD_WAIT_SPECIAL_CMP(recbuf,<sp/>ATCMQTTUNSUB)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_atcmd_uri_map_send.wait<sp/>=<sp/>ATCMD_WAIT_NONE;</highlight><highlight class="comment">//only<sp/>one<sp/>receive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>specialMqttOperatoinCb(recbuf,<sp/>MQTT_CONNECT_UNSUB_SUCCESS);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(atcmd_current<sp/>==<sp/>ATCMQTTPUB<sp/>&amp;&amp;<sp/>ATCMD_WAIT_SPECIAL_CMP(recbuf,<sp/>ATCMQTTPUB)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_atcmd_uri_map_send.wait<sp/>=<sp/>ATCMD_WAIT_NONE;</highlight><highlight class="comment">//only<sp/>one<sp/>receive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>specialMqttOperatoinCb(recbuf,<sp/>MQTT_CONNECT_PUB_SUCCESS);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(atcmd_current<sp/>==<sp/>ATCMQTTDISC<sp/>&amp;&amp;<sp/>ATCMD_WAIT_SPECIAL_CMP(recbuf,<sp/>ATCMQTTDISC)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_atcmd_uri_map_send.wait<sp/>=<sp/>ATCMD_WAIT_NONE;</highlight><highlight class="comment">//only<sp/>one<sp/>receive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>specialMqttOperatoinCb(recbuf,<sp/>MQTT_DISCONNECT_SUCCESS);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atReleaseMqttSession();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>g_atcmd_uri_map_send.wait<sp/>==<sp/>ATCMD_WAIT_INPUT)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(AT_CMD_MQTT_INPUTOK(recbuf))<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_atcmd_uri_map_send.wait<sp/>=<sp/>ATCMD_WAIT_NONE;</highlight><highlight class="comment">//only<sp/>one<sp/>receive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>atcmd_current<sp/>==<sp/>ATCMQTTSUBTOPIC<sp/>||<sp/>atcmd_current<sp/>==<sp/>ATCMQTTUNSUBTOPIC<sp/>||<sp/>atcmd_current<sp/>==<sp/>ATCMQTTTOPIC<sp/>)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sendAtCmd(g_atcmd_uri_map_send.receiveprefix,<sp/>strlen(g_atcmd_uri_map_send.receiveprefix));</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>atcmd_current<sp/>==<sp/>ATCMQTTPAYLOAD<sp/>)</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sendAtCmd(g_atcmd_uri_map_send.payload,<sp/>strlen(g_atcmd_uri_map_send.payload));</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>g_atcmd_uri_map_send.wait<sp/>=<sp/>ATCMD_WAIT_NONE;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>atPraseMqttError(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>recbuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="472"><highlight class="normal">{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str=NULL;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Read<sp/>ERROR<sp/>bytes<sp/>[]&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(recbuf<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;[%s]<sp/>Read<sp/>ERROR<sp/>len<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>recbuf,<sp/>len<sp/>);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>str<sp/>=<sp/>strstr(recbuf,<sp/>AT_CMD_MQTT_RECEIVE_START);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(str)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>atPraseMqttReceive(recbuf,<sp/>len);</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>atPraseMqttCmd(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>recbuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="483"><highlight class="normal">{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>atcmd_current<sp/>:<sp/>%d<sp/>wait:%d<sp/>&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>,<sp/>atcmd_current,<sp/>g_atcmd_uri_map_send.wait);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ATCMDRESPONDOK(recbuf,<sp/>len)<sp/>)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>atPraseMqttOk(recbuf,<sp/>len);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>g_atcmd_uri_map_send.wait<sp/>)</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>atPraseMqttSpecial(recbuf,<sp/>len);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="comment">//receive<sp/>not<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>atPraseMqttError(recbuf,<sp/>len);</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atConnectMqtt(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>timeout)</highlight></codeline>
<codeline lineno="494"><highlight class="normal">{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>atMallocCmd(ATCMQTTSTART,<sp/>AT_CMD_ATCMQTTSTART_SEND,<sp/>AT_CMD_ATCMQTTSTART_RESPOND)<sp/>==<sp/>0)<sp/><sp/></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>atSendCmdChange(ATCMQTTSTART,<sp/>AT_CMD_ATCMQTTSTART_SEND,<sp/>AT_CMD_ATCMQTTSTART_RESPOND,<sp/>AT_CMD_ATCMQTTSTART_TIMEOUT,<sp/>AT_CMD_ATCMQTTSTART_RETRY);<sp/></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atDisconnectMqtt(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>timeout)</highlight></codeline>
<codeline lineno="503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret=0;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sendbuf=NULL;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>clientnum<sp/>=<sp/>atmqtt_module.mqttClienNum;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clientnum<sp/>&gt;<sp/>AT_CMD_MQTT_CLIENT_MAXNUM<sp/>||<sp/>(timeout<sp/>&amp;&amp;<sp/>(timeout<sp/>&lt;<sp/>AT_CMD_ATCMQTTPUB_TIMEOUT_MINI<sp/>||<sp/>timeout<sp/>&gt;<sp/>AT_CMD_ATCMQTTPUB_TIMEOUT_MAX))<sp/>)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>strlen(AT_CMD_ATCMQTTDISC_SEND)<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>sendbuf<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc(<sp/>ret<sp/>);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sendbuf<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>snprintf(sendbuf,<sp/>ret,<sp/>AT_CMD_ATCMQTTDISC_SEND,<sp/>clientnum,<sp/>timeout);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret<sp/>&lt;<sp/>strlen(AT_CMD_ATCMQTTDISC_SEND)<sp/>+<sp/>2)</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=0;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>ATCMQTTDISC<sp/>[%s]&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>,<sp/>sendbuf);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>atMallocCmd(ATCMQTTDISC,<sp/>sendbuf,<sp/>AT_CMD_ATCMQTTDISC_RESPOND)<sp/>==<sp/>0)<sp/><sp/></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atSendCmdChange(ATCMQTTDISC,<sp/>sendbuf,<sp/>AT_CMD_ATCMQTTDISC_RESPOND,<sp/>AT_CMD_ATCMQTTDISC_TIMEOUT,<sp/>AT_CMD_ATCMQTTDISC_RETRY);<sp/></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret=-1;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=-1;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>free(sendbuf);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>sendbuf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atSubMqttTopic(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>qos,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*topic)</highlight></codeline>
<codeline lineno="531"><highlight class="normal">{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret=0;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sendbuf=NULL;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>clientnum<sp/>=<sp/>atmqtt_module.mqttClienNum;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>strlen(topic);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clientnum<sp/>&gt;<sp/>AT_CMD_MQTT_CLIENT_MAXNUM<sp/>||<sp/>qos<sp/>&gt;<sp/>AT_CMD_MQTT_QOS_MAXNUM<sp/>||<sp/>topic<sp/>==<sp/>NULL<sp/>||<sp/>ret<sp/>&lt;<sp/>1<sp/>||<sp/>ret<sp/>&gt;<sp/>AT_CMD_MQTT_MAX_TOPIC_LEN)</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>strlen(AT_CMD_ATCMQTTSUBTOPIC_SEND)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>sendbuf<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc(<sp/>ret<sp/>);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sendbuf<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>snprintf(sendbuf,<sp/>ret,<sp/>AT_CMD_ATCMQTTSUBTOPIC_SEND,<sp/>clientnum,<sp/>strlen(topic),<sp/>qos);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret<sp/>&lt;<sp/>strlen(AT_CMD_ATCMQTTSUBTOPIC_SEND)<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=0;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>ATCMQTTSUBTOPIC<sp/>[%s]&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>,<sp/>sendbuf);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>atMallocCmd(ATCMQTTSUBTOPIC,<sp/>sendbuf,<sp/>topic)<sp/>==<sp/>0)<sp/><sp/></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_atcmd_uri_map_send.wait<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ATCMD_WAIT_INPUT;<sp/></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atSendCmdChange(ATCMQTTSUBTOPIC,<sp/>sendbuf,<sp/>topic,<sp/>AT_CMD_ATCMQTTSUBTOPIC_TIMEOUT,<sp/>AT_CMD_ATCMQTTSUBTOPIC_RETRY);<sp/></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>wait<sp/>[%d]&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>,<sp/>g_atcmd_uri_map_send.wait);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret=-1;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=-1;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>free(sendbuf);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>sendbuf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atUnSubMqttTopic(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dup,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*topic)</highlight></codeline>
<codeline lineno="564"><highlight class="normal">{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret=0;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sendbuf=NULL;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>clientnum<sp/>=<sp/>atmqtt_module.mqttClienNum;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>strlen(topic);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clientnum<sp/>&gt;<sp/>AT_CMD_MQTT_CLIENT_MAXNUM<sp/>||<sp/>dup<sp/>&gt;<sp/>AT_CMD_MQTT_DUP_MAXNUM<sp/>||<sp/>topic<sp/>==<sp/>NULL<sp/>||<sp/>ret<sp/>&lt;<sp/>1<sp/>||<sp/>ret<sp/>&gt;<sp/>AT_CMD_MQTT_MAX_TOPIC_LEN)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>strlen(AT_CMD_ATCMQTTUNSUBTOPIC_SEND)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>sendbuf<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc(<sp/>ret<sp/>);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sendbuf<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>snprintf(sendbuf,<sp/>ret,<sp/>AT_CMD_ATCMQTTUNSUBTOPIC_SEND,<sp/>clientnum,<sp/>strlen(topic),<sp/>dup);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret<sp/>&lt;<sp/>strlen(AT_CMD_ATCMQTTUNSUBTOPIC_SEND)<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=0;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>ATCMQTTUNSUBTOPIC<sp/>[%s]&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>,<sp/>sendbuf);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>atMallocCmd(ATCMQTTUNSUBTOPIC,<sp/>sendbuf,<sp/>topic)<sp/>==<sp/>0)<sp/><sp/></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_atcmd_uri_map_send.wait<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ATCMD_WAIT_INPUT;<sp/></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atSendCmdChange(ATCMQTTUNSUBTOPIC,<sp/>sendbuf,<sp/>topic,<sp/>AT_CMD_ATCMQTTUNSUBTOPIC_TIMEOUT,<sp/>AT_CMD_ATCMQTTUNSUBTOPIC_RETRY);<sp/></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret=-1;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=-1;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>free(sendbuf);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>sendbuf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atPublishMqttTopic(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*topic,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*payload)</highlight></codeline>
<codeline lineno="596"><highlight class="normal">{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret=0;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sendbuf=NULL;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>clientnum<sp/>=<sp/>atmqtt_module.mqttClienNum;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>strlen(topic);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clientnum<sp/>&gt;<sp/>AT_CMD_MQTT_CLIENT_MAXNUM<sp/>||<sp/>topic<sp/>==<sp/>NULL<sp/><sp/>||<sp/>payload<sp/>==<sp/>NULL<sp/>||<sp/>ret<sp/>&lt;<sp/>1<sp/>||<sp/>ret<sp/>&gt;<sp/>AT_CMD_MQTT_MAX_TOPIC_LEN)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>strlen(payload);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret<sp/>&lt;<sp/>1<sp/>||<sp/>ret<sp/>&gt;<sp/>AT_CMD_MQTT_MAX_PAYLOAD_LEN)</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>ATCMQTTTOPIC<sp/>max<sp/>len<sp/>[%d]&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>,<sp/>ret);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>strlen(AT_CMD_ATCMQTTTOPIC_SEND)<sp/>+<sp/>4;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>sendbuf<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc(<sp/>ret<sp/>);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sendbuf<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>snprintf(sendbuf,<sp/>ret,<sp/>AT_CMD_ATCMQTTTOPIC_SEND,<sp/>clientnum,<sp/>strlen(topic));</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret<sp/>&lt;<sp/>strlen(AT_CMD_ATCMQTTSUBTOPIC_SEND)<sp/>+<sp/>4)</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=1;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>ATCMQTTTOPIC<sp/>[%s]&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>,<sp/>sendbuf);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>g_atcmd_uri_map_send.payload<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)realloc(g_atcmd_uri_map_send.payload,<sp/>strlen(payload)+1<sp/>);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(g_atcmd_uri_map_send.payload)</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(g_atcmd_uri_map_send.payload,<sp/>payload,<sp/>strlen(payload)+1);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>atMallocCmd(ATCMQTTTOPIC,<sp/>sendbuf,<sp/>topic)<sp/>==<sp/>0)<sp/><sp/></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(ATTAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>ATCMQTTTOPIC<sp/>payload<sp/>[%s]&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>,<sp/>g_atcmd_uri_map_send.payload);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_atcmd_uri_map_send.wait<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ATCMD_WAIT_INPUT;<sp/></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atSendCmdChange(ATCMQTTTOPIC,<sp/>sendbuf,<sp/>topic,<sp/>AT_CMD_ATCMQTTSUBTOPIC_TIMEOUT,<sp/>AT_CMD_ATCMQTTSUBTOPIC_RETRY);<sp/></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret=0;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=-1;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>free(sendbuf);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>sendbuf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="main/atprocess/atmqtt.c"/>
  </compounddef>
</doxygen>
