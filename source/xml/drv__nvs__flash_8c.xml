<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="drv__nvs__flash_8c" kind="file" language="C++">
    <compoundname>drv_nvs_flash.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="yes">esp_err.h</includes>
    <includes local="yes">esp_log.h</includes>
    <includes local="yes">nvs_flash.h</includes>
    <includes local="yes">nvs.h</includes>
    <includes refid="drv__nvs__flash_8h" local="yes">drv_nvs_flash.h</includes>
    <incdepgraph>
      <node id="6">
        <label>nvs_flash.h</label>
      </node>
      <node id="1">
        <label>G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c</label>
        <link refid="drv__nvs__flash_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>drv_nvs_flash.h</label>
        <link refid="drv__nvs__flash_8h_source"/>
      </node>
      <node id="4">
        <label>esp_err.h</label>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>esp_log.h</label>
      </node>
      <node id="7">
        <label>nvs.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="drv__nvs__flash_8c_1a2f08881d509efb049c24baf9bd2a1fde" prot="public" static="no">
        <name>MFG_PARTITION_NAME</name>
        <initializer>&quot;nvs&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="37" column="9" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="drv__nvs__flash_8c_1a16a76704a981578fee7ff90b91fa8f2c" prot="public" static="no">
        <name>NVS_PRODUCT</name>
        <initializer>&quot;aliyun-key&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="38" column="9" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="drv__nvs__flash_8c_1a95783032af72ceaa48cb7a678d20b5d4" prot="public" static="no">
        <name>FLASH_KEY_DEVICE_PARAM</name>
        <initializer>&quot;DeviceParam&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="39" column="9" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="drv__nvs__flash_8c_1a8b53b99543fba8ee5b12669fa1221da4" prot="public" static="no">
        <name>FLASH_KEY_DEVICE_NAME</name>
        <initializer>&quot;DeviceName&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="40" column="9" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="drv__nvs__flash_8c_1a4ce39eedbd1b1a92f6539afe35420646" prot="public" static="no">
        <name>FLASH_KEY_DEVICE_SECRET</name>
        <initializer>&quot;DeviceSecret&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="41" column="9" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="drv__nvs__flash_8c_1a28d96de0cc472605c90470e8abffadc7" prot="public" static="no">
        <name>FLASH_KEY_PRODUCT_KEY</name>
        <initializer>&quot;ProductKey&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="42" column="9" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="drv__nvs__flash_8c_1adf7a279c8a7cc9caec51cce9649aec06" prot="public" static="no">
        <name>FLASH_KEY_PRODUCT_SECRET</name>
        <initializer>&quot;ProductSecret&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="43" column="9" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="drv__nvs__flash_8c_1a3fad4586067101515f80dbe862230e79" prot="public" static="no">
        <name>FLASH_KEY_MQTT_DOMAIN</name>
        <initializer>&quot;MqttDomain&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="44" column="9" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="drv__nvs__flash_8c_1ad2b54f9189f9aac008c9709c70ba8b85" prot="public" static="no">
        <name>FLASH_KEY_MQTT_PORT</name>
        <initializer>&quot;MqttPort&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="45" column="9" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="drv__nvs__flash_8c_1a5a85b9c772bbeb480b209a3e6ea92b4c" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* TAG</definition>
        <argsstring></argsstring>
        <name>TAG</name>
        <initializer>= &quot;drv_nvs_flash&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="48" column="19" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="drv__nvs__flash_8c_1afef7b3084c492a7dad2a0cedeeb4cf6f" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool s_part_init_flag</definition>
        <argsstring></argsstring>
        <name>s_part_init_flag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="50" column="13" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="drv__nvs__flash_8c_1a398127cf9d258db09de80f49432c03ad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>static esp_err_t halProductParamInit</definition>
        <argsstring>(void)</argsstring>
        <name>halProductParamInit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="52" column="18" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="52" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="drv__nvs__flash_8c_1a4431143492c689239eedcdb1c25a14ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int halGetProductParam</definition>
        <argsstring>(char *param_name, const char *param_name_str, int len)</argsstring>
        <name>halGetProductParam</name>
        <param>
          <type>char *</type>
          <declname>param_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>param_name_str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="70" column="12" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="70" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="drv__nvs__flash_8c_1a37a3f032963402dc1b1dff033ed6f2cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int halGetDeviceParam</definition>
        <argsstring>(char *device_param, int len)</argsstring>
        <name>halGetDeviceParam</name>
        <param>
          <type>char *</type>
          <declname>device_param</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="128" column="5" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="128" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="drv__nvs__flash_8c_1a770e4fd9c69ec3fac2e1ecf6107b1d6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int halGetDeviceName</definition>
        <argsstring>(char device_name[(32)+1])</argsstring>
        <name>halGetDeviceName</name>
        <param>
          <type>char</type>
          <declname>device_name</declname>
          <array>[(32)+1]</array>
        </param>
        <briefdescription>
<para>Get device name from user&apos;s system persistent storage. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[ou]</parametername>
</parameternamelist>
<parameterdescription>
<para>device_name: array to store device name, max length is IOTX_DEVICE_NAME_LEN </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the actual length of device name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="140" column="5" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="drv__nvs__flash_8c_1a7d3eb77a97dac6609b6a66167305c719" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int halGetDeviceSecret</definition>
        <argsstring>(char device_secret[(64)+1])</argsstring>
        <name>halGetDeviceSecret</name>
        <param>
          <type>char</type>
          <declname>device_secret</declname>
          <array>[(64)+1]</array>
        </param>
        <briefdescription>
<para>Get device secret from user&apos;s system persistent storage. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[ou]</parametername>
</parameternamelist>
<parameterdescription>
<para>device_secret: array to store device secret, max length is IOTX_DEVICE_SECRET_LEN </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the actual length of device secret </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="151" column="5" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="drv__nvs__flash_8c_1a8907cf145e5cdcf10776e0f41c861fa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int halGetProductKey</definition>
        <argsstring>(char product_key[(20)+1])</argsstring>
        <name>halGetProductKey</name>
        <param>
          <type>char</type>
          <declname>product_key</declname>
          <array>[(20)+1]</array>
        </param>
        <briefdescription>
<para>Get product key from user&apos;s system persistent storage. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[ou]</parametername>
</parameternamelist>
<parameterdescription>
<para>product_key: array to store product key, max length is IOTX_PRODUCT_KEY_LEN </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the actual length of product key </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="162" column="5" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="drv__nvs__flash_8c_1ab556edfb14781e1cede6098e6ae36e25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int halGetProductSecret</definition>
        <argsstring>(char product_secret[(64)+1])</argsstring>
        <name>halGetProductSecret</name>
        <param>
          <type>char</type>
          <declname>product_secret</declname>
          <array>[(64)+1]</array>
        </param>
        <briefdescription>
<para>Get product secret from user&apos;s system persistent storage. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[ou]</parametername>
</parameternamelist>
<parameterdescription>
<para>product_secret: array to store product key, max length is IOTX_PRODUCT_SECRET_LEN </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the actual length of product key </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="173" column="5" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="drv__nvs__flash_8c_1ac0c52b415a88b9951cb1c2a7d776f147" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int halGetIotMqttDomain</definition>
        <argsstring>(char domain[(64)+1])</argsstring>
        <name>halGetIotMqttDomain</name>
        <param>
          <type>char</type>
          <declname>domain</declname>
          <array>[(64)+1]</array>
        </param>
        <briefdescription>
<para>Get ito domain from user&apos;s system persistent storage. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[ou]</parametername>
</parameternamelist>
<parameterdescription>
<para>domain: array to store MqttDomain, max length is IOTX_MQTT_DOMAIN_LEN </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the actual length of MqttDomain </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="184" column="5" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="drv__nvs__flash_8c_1a5e694d32fd01b9933c8e676f9f18fdd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int halGetIotMqttPort</definition>
        <argsstring>(char port[(8)+1])</argsstring>
        <name>halGetIotMqttPort</name>
        <param>
          <type>char</type>
          <declname>port</declname>
          <array>[(8)+1]</array>
        </param>
        <briefdescription>
<para>Get ito port from user&apos;s system persistent storage. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[ou]</parametername>
</parameternamelist>
<parameterdescription>
<para>halGetIotMqttPort: array to store MqttPort, max length is IOTX_MQTT_PORT_LEN </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the actual length of Mqtt Port </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="195" column="5" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="195" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="drv__nvs__flash_8c_1a164d34bef674d62f1ca077eca31a51d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int halGetFirmwareVersion</definition>
        <argsstring>(char *version)</argsstring>
        <name>halGetFirmwareVersion</name>
        <param>
          <type>char *</type>
          <declname>version</declname>
        </param>
        <briefdescription>
<para>Get firmware version. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[ou]</parametername>
</parameternamelist>
<parameterdescription>
<para>version: array to store firmware version, max length is IOTX_FIRMWARE_VER_LEN </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the actual length of firmware version </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="206" column="5" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="206" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="drv__nvs__flash_8c_1a62c7d2e2ba927afad875e56d5c60cf95" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int halSetProductParam</definition>
        <argsstring>(char *param_name, const char *param_name_str, int len)</argsstring>
        <name>halSetProductParam</name>
        <param>
          <type>char *</type>
          <declname>param_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>param_name_str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="224" column="12" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="224" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="drv__nvs__flash_8c_1ac01585ed4ba0f1ba75d89b929856647c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int halSetDeviceParam</definition>
        <argsstring>(char *device_param, int len)</argsstring>
        <name>halSetDeviceParam</name>
        <param>
          <type>char *</type>
          <declname>device_param</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="278" column="5" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="278" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="drv__nvs__flash_8c_1ad2ba3764ae4544d25b9791713e0c39cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int halSetDeviceName</definition>
        <argsstring>(char *device_name)</argsstring>
        <name>halSetDeviceName</name>
        <param>
          <type>char *</type>
          <declname>device_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="285" column="5" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="285" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="drv__nvs__flash_8c_1ab0cc9589c5a1f4659464f64f0e19d7c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int halSetDeviceSecret</definition>
        <argsstring>(char *device_secret)</argsstring>
        <name>halSetDeviceSecret</name>
        <param>
          <type>char *</type>
          <declname>device_secret</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="290" column="5" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="290" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="drv__nvs__flash_8c_1a65eaaa3157dd7cefdc75e7993da77691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int halSetProductKey</definition>
        <argsstring>(char *product_key)</argsstring>
        <name>halSetProductKey</name>
        <param>
          <type>char *</type>
          <declname>product_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="295" column="5" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="295" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="drv__nvs__flash_8c_1a3681c742536373701992b2d6bc0e1ced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int halSetProductSecret</definition>
        <argsstring>(char *product_secret)</argsstring>
        <name>halSetProductSecret</name>
        <param>
          <type>char *</type>
          <declname>product_secret</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="300" column="5" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="300" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="drv__nvs__flash_8c_1afe22c7b64ac80ffdbd3796e42b11406a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int halSetIotMqttDomain</definition>
        <argsstring>(char *mqttdomain)</argsstring>
        <name>halSetIotMqttDomain</name>
        <param>
          <type>char *</type>
          <declname>mqttdomain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="305" column="5" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="305" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="drv__nvs__flash_8c_1a7e505f22fa73b661ba6ef8af93425185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int halSetIotMqttPort</definition>
        <argsstring>(char *mqttport)</argsstring>
        <name>halSetIotMqttPort</name>
        <param>
          <type>char *</type>
          <declname>mqttport</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="310" column="5" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="310" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="drv__nvs__flash_8c_1a5781fe36b095e52303999245e5506450" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int halSetNumDeviceName</definition>
        <argsstring>(unsigned long long device_id)</argsstring>
        <name>halSetNumDeviceName</name>
        <param>
          <type>unsigned long long</type>
          <declname>device_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="315" column="5" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="315" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="drv__nvs__flash_8c_1a46368ea1d6d498afe050a03052f655ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int halSetNumIotMqttPort</definition>
        <argsstring>(int port)</argsstring>
        <name>halSetNumIotMqttPort</name>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" line="321" column="5" bodyfile="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c" bodystart="321" bodyend="326"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>ESPRESSIF<sp/>MIT<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>&lt;ESPRESSIF<sp/>SYSTEMS<sp/>(SHANGHAI)<sp/>PTE<sp/>LTD&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted<sp/>for<sp/>use<sp/>on<sp/>all<sp/>ESPRESSIF<sp/>SYSTEMS<sp/>products,<sp/>in<sp/>which<sp/>case,</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>it<sp/>is<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_err.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_log.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nvs_flash.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nvs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;drv_nvs_flash.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MFG_PARTITION_NAME<sp/>&quot;nvs&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NVS_PRODUCT<sp/>&quot;aliyun-key&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLASH_KEY_DEVICE_PARAM<sp/><sp/><sp/><sp/><sp/><sp/>&quot;DeviceParam&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLASH_KEY_DEVICE_NAME<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;DeviceName&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLASH_KEY_DEVICE_SECRET<sp/><sp/><sp/><sp/><sp/>&quot;DeviceSecret&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLASH_KEY_PRODUCT_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;ProductKey&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLASH_KEY_PRODUCT_SECRET<sp/><sp/><sp/><sp/>&quot;ProductSecret&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLASH_KEY_MQTT_DOMAIN<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;MqttDomain&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLASH_KEY_MQTT_PORT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;MqttPort&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TAG<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;drv_nvs_flash&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>s_part_init_flag;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>esp_err_t<sp/>halProductParamInit(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/>ret<sp/>=<sp/>ESP_OK;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s_part_init_flag<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ret<sp/>=<sp/>nvs_flash_init_partition(MFG_PARTITION_NAME))<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(TAG,<sp/></highlight><highlight class="stringliteral">&quot;NVS<sp/>Flash<sp/>init<sp/>%s<sp/>failed,<sp/>Please<sp/>check<sp/>that<sp/>you<sp/>have<sp/>flashed<sp/>fctry<sp/>partition!!!&quot;</highlight><highlight class="normal">,<sp/>MFG_PARTITION_NAME);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_part_init_flag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halGetProductParam(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*param_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*param_name_str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/>ret<sp/>=<sp/>ESP_OK;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>read_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>nvs_handle<sp/>handle;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(halProductParamInit()<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(param_name<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>param<sp/>%s<sp/>NULL&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>param_name);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>nvs_open_from_partition(MFG_PARTITION_NAME,<sp/>NVS_PRODUCT,<sp/>NVS_READONLY,<sp/>&amp;handle);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>nvs_open<sp/>failed<sp/>with<sp/>%x&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>ret);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(len<sp/>&lt;=<sp/>0)<sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>nvs_get_str(handle,<sp/>param_name_str,<sp/>NULL,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*)&amp;read_len);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>nvs_get_str<sp/>get<sp/>%s<sp/>failed<sp/>with<sp/>%x&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>param_name_str,<sp/>ret);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>nvs_get_str(handle,<sp/>param_name_str,<sp/>param_name,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*)&amp;read_len);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>nvs_get_str<sp/>get<sp/>%s<sp/>failed<sp/>with<sp/>%x&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>param_name_str,<sp/>ret);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGV(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%s<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>param_name_str,<sp/>param_name);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_len<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>nvs_get_blob(handle,<sp/>param_name_str,<sp/>param_name,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*)&amp;read_len);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>ESP_OK<sp/>||<sp/>read_len<sp/>!=<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>nvs_get_str<sp/>get<sp/>%s<sp/>failed<sp/>with<sp/>%x<sp/>or<sp/>len&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>param_name_str,<sp/>ret);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGV(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%s<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>param_name_str,<sp/>param_name);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>nvs_close(handle);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>ESP_OK)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>read_len;</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halGetDeviceParam(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*device_param,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>halGetProductParam(device_param,<sp/>FLASH_KEY_DEVICE_PARAM,<sp/>len);</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halGetDeviceName(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>device_name[IOTX_DEVICE_NAME_LEN<sp/>+<sp/>1])</highlight></codeline>
<codeline lineno="141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>halGetProductParam(device_name,<sp/>FLASH_KEY_DEVICE_NAME,<sp/>0);</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halGetDeviceSecret(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>device_secret[IOTX_DEVICE_SECRET_LEN<sp/>+<sp/>1])</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>halGetProductParam(device_secret,<sp/>FLASH_KEY_DEVICE_SECRET,<sp/>0);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halGetProductKey(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>product_key[IOTX_PRODUCT_KEY_LEN<sp/>+<sp/>1])</highlight></codeline>
<codeline lineno="163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>halGetProductParam(product_key,<sp/>FLASH_KEY_PRODUCT_KEY,<sp/>0);</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halGetProductSecret(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>product_secret[IOTX_PRODUCT_SECRET_LEN<sp/>+<sp/>1])</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>halGetProductParam(product_secret,<sp/>FLASH_KEY_PRODUCT_SECRET,<sp/>0);</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halGetIotMqttDomain(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>domain[IOTX_MQTT_DOMAIN_LEN<sp/>+<sp/>1])</highlight></codeline>
<codeline lineno="185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>halGetProductParam(domain,<sp/>FLASH_KEY_MQTT_DOMAIN,<sp/>0);</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halGetIotMqttPort(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>port[IOTX_MQTT_PORT_LEN<sp/>+<sp/>1])</highlight></codeline>
<codeline lineno="196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>halGetProductParam(port,<sp/>FLASH_KEY_MQTT_PORT,<sp/>0);</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halGetFirmwareVersion(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*version)</highlight></codeline>
<codeline lineno="207"><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!version)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>version<sp/>is<sp/>NULL&quot;</highlight><highlight class="normal">,<sp/>__func__);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(version,<sp/>0,<sp/>IOTX_FIRMWARE_VER_LEN);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>strlen(CONFIG_LINKKIT_FIRMWARE_VERSION);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>IOTX_FIRMWARE_VER_LEN)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(version,<sp/>CONFIG_LINKKIT_FIRMWARE_VERSION,<sp/>len);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halSetProductParam(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*param_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*param_name_str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="225"><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/>ret<sp/>=<sp/>ESP_OK;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>write_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>nvs_handle<sp/>handle;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(halProductParamInit()<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(param_name<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>param<sp/>%s<sp/>NULL&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>param_name);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>nvs_open_from_partition(MFG_PARTITION_NAME,<sp/>NVS_PRODUCT,<sp/>NVS_READWRITE,<sp/>&amp;handle);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>nvs_open<sp/>failed<sp/>with<sp/>%x&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>ret);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%s:[%s]<sp/>len:%d&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>param_name_str,<sp/>param_name,<sp/>len);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(len<sp/>&lt;=<sp/>0)<sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>nvs_set_str(handle,<sp/>param_name_str,<sp/>param_name);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>nvs_set_str<sp/>set<sp/>%s<sp/>failed<sp/>with<sp/>%x&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>param_name_str,<sp/>ret);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_len<sp/>=<sp/>strlen(param_name);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGV(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%s<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>param_name_str,<sp/>param_name);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_len<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>nvs_set_blob(handle,<sp/>param_name_str,<sp/>param_name,<sp/>write_len);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>nvs_set_str<sp/>set<sp/>%s<sp/>failed<sp/>with<sp/>%x<sp/>or<sp/>len&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>param_name_str,<sp/>ret);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGV(TAG,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%s<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>param_name_str,<sp/>param_name);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>nvs_close(handle);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>ESP_OK)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_len;</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halSetDeviceParam(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*device_param,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="279"><highlight class="normal">{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>halSetProductParam(device_param,<sp/>FLASH_KEY_DEVICE_PARAM,<sp/>len);</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halSetDeviceName(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*device_name)</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>halSetProductParam(device_name,<sp/>FLASH_KEY_DEVICE_NAME,<sp/>0);</highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halSetDeviceSecret(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*device_secret)</highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>halSetProductParam(device_secret,<sp/>FLASH_KEY_DEVICE_SECRET,<sp/>0);</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halSetProductKey(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*product_key)</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>halSetProductParam(product_key,<sp/>FLASH_KEY_PRODUCT_KEY,<sp/>0);</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halSetProductSecret(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*product_secret)</highlight></codeline>
<codeline lineno="301"><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>halSetProductParam(product_secret,<sp/>FLASH_KEY_PRODUCT_SECRET,<sp/>0);</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halSetIotMqttDomain(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mqttdomain)</highlight></codeline>
<codeline lineno="306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>halSetProductParam(mqttdomain,<sp/>FLASH_KEY_MQTT_DOMAIN,<sp/>0);</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halSetIotMqttPort(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mqttport)</highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>halSetProductParam(mqttport,<sp/>FLASH_KEY_MQTT_PORT,<sp/>0);</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halSetNumDeviceName(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>device_id)</highlight></codeline>
<codeline lineno="316"><highlight class="normal">{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>device_name[IOTX_DEVICE_NAME_LEN+1];</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>snprintf(device_name,<sp/>IOTX_DEVICE_NAME_LEN,<sp/></highlight><highlight class="stringliteral">&quot;%lld&quot;</highlight><highlight class="normal">,<sp/>device_id);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>halSetDeviceName(device_name);</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halSetNumIotMqttPort(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port)</highlight></codeline>
<codeline lineno="322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>mqttport[IOTX_MQTT_PORT_LEN+1];</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>snprintf(mqttport,<sp/>IOTX_MQTT_PORT_LEN,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>port);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>halSetIotMqttPort(mqttport);</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="G:/code/esp/code/freezer/main/freezerdrv/drv_nvs_flash.c"/>
  </compounddef>
</doxygen>
